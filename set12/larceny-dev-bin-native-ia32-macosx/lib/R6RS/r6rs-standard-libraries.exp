(begin #\L (ex:register-library! (ex:make-library '(core primitives) (lambda () '()) '((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (0) #f ()) (... macro ... (0) #f ()) (syntax macro syntax (0) #f ()) (syntax-case macro syntax-case (0) #f ()) (make-variable-transformer variable ex:make-variable-transformer (0) #f ()) (identifier? variable ex:identifier? (0) #f ()) (bound-identifier=? variable ex:bound-identifier=? (0) #f ()) (free-identifier=? variable ex:free-identifier=? (0) #f ()) (generate-temporaries variable ex:generate-temporaries (0) #f ()) (datum->syntax variable ex:datum->syntax (0) #f ()) (syntax->datum variable ex:syntax->datum (0) #f ()) (syntax-violation variable ex:syntax-violation (0) #f ()) (environment variable ex:environment (0) #f ()) (environment-bindings variable ex:environment-bindings (0) #f ()) (eval variable ex:eval (0) #f ()) (undefined variable ex:undefined (0) #f ())) '(((core primitive-macros) 0)) '(system) (lambda () (values)) (lambda () (values)) '|\x0;build~1on7G8~2|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core with-syntax) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~50| 0 1 2 3) (|\x0;env~1on7G8~34| 4 1 2 3) (|\x0;env~1on7G8~16| 5 1 2 3)) (5 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (4 (((out) . #f) ((in) . #f) ((e1) . #f) ((e2) . #f))) (3 (((with-syntax) macro |\x0;with-syntax~1on7G8~3| (0) #f (core with-syntax)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((list) variable list (0) #f ()))) (2 (((x) variable |\x0;x~1on7G8~5| (1) #f (core with-syntax)))) (1 ()) (0 (((e1) . #f) ((e2) . #f)))))) '((with-syntax macro |\x0;with-syntax~1on7G8~3| (0) #f (core with-syntax))) '(((core primitives) 0 1)) '(|\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;with-syntax~1on7G8~3| (lambda (|\x0;x~1on7G8~5|) (let ((|\x0;input~1on7G8~7| |\x0;x~1on7G8~5|)) (let ((|\x0;fail~1on7G8~8| (lambda () (let ((|\x0;fail~1on7G8~9| (lambda () (let ((|\x0;fail~1on7G8~10| (lambda () (ex:invalid-form |\x0;input~1on7G8~7|)))) (if (pair? |\x0;input~1on7G8~7|) (let ((|\x0;temp~1on7G8~28| (car |\x0;input~1on7G8~7|))) (let ((|\x0;temp~1on7G8~17| (cdr |\x0;input~1on7G8~7|))) (if (pair? |\x0;temp~1on7G8~17|) (let ((|\x0;temp~1on7G8~21| (car |\x0;temp~1on7G8~17|))) (ex:map-while (lambda (|\x0;temp~1on7G8~21|) (if (pair? |\x0;temp~1on7G8~21|) (let ((|\x0;temp~1on7G8~27| (car |\x0;temp~1on7G8~21|))) (let ((|\x0;out~1on7G8~11| |\x0;temp~1on7G8~27|)) (let ((|\x0;temp~1on7G8~24| (cdr |\x0;temp~1on7G8~21|))) (if (pair? |\x0;temp~1on7G8~24|) (let ((|\x0;temp~1on7G8~26| (car |\x0;temp~1on7G8~24|))) (let ((|\x0;in~1on7G8~12| |\x0;temp~1on7G8~26|)) (let ((|\x0;temp~1on7G8~25| (cdr |\x0;temp~1on7G8~24|))) (if (null? |\x0;temp~1on7G8~25|) (list |\x0;out~1on7G8~11| |\x0;in~1on7G8~12|) #f)))) #f)))) #f)) |\x0;temp~1on7G8~21| (lambda (|\x0;cols~1on7G8~23| |\x0;rest~1on7G8~22|) (if (null? |\x0;rest~1on7G8~22|) (apply (lambda (|\x0;out~1on7G8~11| |\x0;in~1on7G8~12|) (let ((|\x0;temp~1on7G8~18| (cdr |\x0;temp~1on7G8~17|))) (if (pair? |\x0;temp~1on7G8~18|) (let ((|\x0;temp~1on7G8~20| (car |\x0;temp~1on7G8~18|))) (let ((|\x0;e1~1on7G8~13| |\x0;temp~1on7G8~20|)) (let ((|\x0;temp~1on7G8~19| (cdr |\x0;temp~1on7G8~18|))) (if (list? |\x0;temp~1on7G8~19|) (let ((|\x0;e2~1on7G8~14| |\x0;temp~1on7G8~19|)) (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1on7G8~16|) 0 '(core with-syntax)) (cons (cons (ex:syntax-rename 'list '() '(|\x0;env~1on7G8~16|) 0 '(core with-syntax)) |\x0;in~1on7G8~12|) (cons '() (cons (cons |\x0;out~1on7G8~11| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~16|) 0 '(core with-syntax)) (cons |\x0;e1~1on7G8~13| |\x0;e2~1on7G8~14|)) '())) '()))))) (|\x0;fail~1on7G8~10|))))) (|\x0;fail~1on7G8~10|)))) (if (null? |\x0;cols~1on7G8~23|) '(() ()) (apply map list |\x0;cols~1on7G8~23|))) (|\x0;fail~1on7G8~10|))))) (|\x0;fail~1on7G8~10|)))) (|\x0;fail~1on7G8~10|)))))) (if (pair? |\x0;input~1on7G8~7|) (let ((|\x0;temp~1on7G8~46| (car |\x0;input~1on7G8~7|))) (let ((|\x0;temp~1on7G8~35| (cdr |\x0;input~1on7G8~7|))) (if (pair? |\x0;temp~1on7G8~35|) (let ((|\x0;temp~1on7G8~39| (car |\x0;temp~1on7G8~35|))) (if (pair? |\x0;temp~1on7G8~39|) (let ((|\x0;temp~1on7G8~41| (car |\x0;temp~1on7G8~39|))) (if (pair? |\x0;temp~1on7G8~41|) (let ((|\x0;temp~1on7G8~45| (car |\x0;temp~1on7G8~41|))) (let ((|\x0;out~1on7G8~29| |\x0;temp~1on7G8~45|)) (let ((|\x0;temp~1on7G8~42| (cdr |\x0;temp~1on7G8~41|))) (if (pair? |\x0;temp~1on7G8~42|) (let ((|\x0;temp~1on7G8~44| (car |\x0;temp~1on7G8~42|))) (let ((|\x0;in~1on7G8~30| |\x0;temp~1on7G8~44|)) (let ((|\x0;temp~1on7G8~43| (cdr |\x0;temp~1on7G8~42|))) (if (null? |\x0;temp~1on7G8~43|) (let ((|\x0;temp~1on7G8~40| (cdr |\x0;temp~1on7G8~39|))) (if (null? |\x0;temp~1on7G8~40|) (let ((|\x0;temp~1on7G8~36| (cdr |\x0;temp~1on7G8~35|))) (if (pair? |\x0;temp~1on7G8~36|) (let ((|\x0;temp~1on7G8~38| (car |\x0;temp~1on7G8~36|))) (let ((|\x0;e1~1on7G8~31| |\x0;temp~1on7G8~38|)) (let ((|\x0;temp~1on7G8~37| (cdr |\x0;temp~1on7G8~36|))) (if (list? |\x0;temp~1on7G8~37|) (let ((|\x0;e2~1on7G8~32| |\x0;temp~1on7G8~37|)) (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1on7G8~34|) 0 '(core with-syntax)) (cons |\x0;in~1on7G8~30| (cons '() (cons (cons |\x0;out~1on7G8~29| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~34|) 0 '(core with-syntax)) (cons |\x0;e1~1on7G8~31| |\x0;e2~1on7G8~32|)) '())) '()))))) (|\x0;fail~1on7G8~9|))))) (|\x0;fail~1on7G8~9|))) (|\x0;fail~1on7G8~9|))) (|\x0;fail~1on7G8~9|))))) (|\x0;fail~1on7G8~9|))))) (|\x0;fail~1on7G8~9|))) (|\x0;fail~1on7G8~9|))) (|\x0;fail~1on7G8~9|)))) (|\x0;fail~1on7G8~9|)))))) (if (pair? |\x0;input~1on7G8~7|) (let ((|\x0;temp~1on7G8~56| (car |\x0;input~1on7G8~7|))) (let ((|\x0;temp~1on7G8~51| (cdr |\x0;input~1on7G8~7|))) (if (pair? |\x0;temp~1on7G8~51|) (let ((|\x0;temp~1on7G8~55| (car |\x0;temp~1on7G8~51|))) (if (null? |\x0;temp~1on7G8~55|) (let ((|\x0;temp~1on7G8~52| (cdr |\x0;temp~1on7G8~51|))) (if (pair? |\x0;temp~1on7G8~52|) (let ((|\x0;temp~1on7G8~54| (car |\x0;temp~1on7G8~52|))) (let ((|\x0;e1~1on7G8~47| |\x0;temp~1on7G8~54|)) (let ((|\x0;temp~1on7G8~53| (cdr |\x0;temp~1on7G8~52|))) (if (list? |\x0;temp~1on7G8~53|) (let ((|\x0;e2~1on7G8~48| |\x0;temp~1on7G8~53|)) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~50|) 0 '(core with-syntax)) (cons |\x0;e1~1on7G8~47| |\x0;e2~1on7G8~48|))) (|\x0;fail~1on7G8~8|))))) (|\x0;fail~1on7G8~8|))) (|\x0;fail~1on7G8~8|))) (|\x0;fail~1on7G8~8|)))) (|\x0;fail~1on7G8~8|)))))) (values)) (lambda () (values)) '|\x0;build~1on7G8~57|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core syntax-rules) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~128| 0 1 2 3 4 5) (|\x0;env~1on7G8~116| 6 1 2 3 4 5) (|\x0;env~1on7G8~99| 7 8 3 4 5) (|\x0;env~1on7G8~81| 9 10 3 4 5)) (10 (((ellipsis) . #f) ((k) . #f) ((cl) . #f))) (9 (((cl) . #f))) (8 (((k) . #f) ((cl) . #f))) (7 (((cl) . #f))) (6 (((keyword) . #f) ((pattern) . #f) ((template) . #f))) (5 (((syntax-error) macro |\x0;syntax-error~1on7G8~139| (0) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1on7G8~58| (0) #f (core syntax-rules)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro |\x0;with-syntax~1on7G8~3| (1) #f (core with-syntax)) ((map) variable map (1) #f ()) ((for-all) variable for-all (1) #f ()))) (4 (((x) variable |\x0;x~1on7G8~60| (1) #f (core syntax-rules)))) (3 (((clause) variable |\x0;clause~1on7G8~61| (1) #f (core syntax-rules)))) (2 (((y) variable |\x0;y~1on7G8~105| (1) #f (core syntax-rules)))) (1 ()) (0 (((keyword) . #f) ((pattern) . #f) ((msg) . #f) ((irritant1) . #f)))))) '((syntax-rules macro |\x0;syntax-rules~1on7G8~58| (0) #f (core syntax-rules)) (r7rs:syntax-error macro |\x0;syntax-error~1on7G8~139| (0) #f (core syntax-rules))) '(((core with-syntax) 1) ((core primitives) 1 0)) '(|\x0;build~1on7G8~57| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;syntax-rules~1on7G8~58| (lambda (|\x0;x~1on7G8~60|) ((lambda (|\x0;clause~1on7G8~61|) (set! |\x0;clause~1on7G8~61| (lambda (|\x0;y~1on7G8~105|) (let ((|\x0;input~1on7G8~107| |\x0;y~1on7G8~105|)) (let ((|\x0;fail~1on7G8~108| (lambda () (let ((|\x0;fail~1on7G8~109| (lambda () (let ((|\x0;fail~1on7G8~110| (lambda () (ex:invalid-form |\x0;input~1on7G8~107|)))) (ex:syntax-violation 'syntax-rules "Invalid expression" |\x0;x~1on7G8~60|))))) (if (pair? |\x0;input~1on7G8~107|) (let ((|\x0;temp~1on7G8~120| (car |\x0;input~1on7G8~107|))) (if (pair? |\x0;temp~1on7G8~120|) (let ((|\x0;temp~1on7G8~122| (car |\x0;temp~1on7G8~120|))) (let ((|\x0;keyword~1on7G8~112| |\x0;temp~1on7G8~122|)) (let ((|\x0;temp~1on7G8~121| (cdr |\x0;temp~1on7G8~120|))) (let ((|\x0;pattern~1on7G8~113| |\x0;temp~1on7G8~121|)) (let ((|\x0;temp~1on7G8~117| (cdr |\x0;input~1on7G8~107|))) (if (pair? |\x0;temp~1on7G8~117|) (let ((|\x0;temp~1on7G8~119| (car |\x0;temp~1on7G8~117|))) (let ((|\x0;template~1on7G8~114| |\x0;temp~1on7G8~119|)) (let ((|\x0;temp~1on7G8~118| (cdr |\x0;temp~1on7G8~117|))) (if (null? |\x0;temp~1on7G8~118|) (cons (cons (ex:syntax-rename 'dummy '() '(|\x0;env~1on7G8~116|) 0 '(core syntax-rules)) |\x0;pattern~1on7G8~113|) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~116|) 0 '(core syntax-rules)) (cons |\x0;template~1on7G8~114| '())) '())) (|\x0;fail~1on7G8~109|))))) (|\x0;fail~1on7G8~109|))))))) (|\x0;fail~1on7G8~109|))) (|\x0;fail~1on7G8~109|)))))) (if (pair? |\x0;input~1on7G8~107|) (let ((|\x0;temp~1on7G8~136| (car |\x0;input~1on7G8~107|))) (if (pair? |\x0;temp~1on7G8~136|) (let ((|\x0;temp~1on7G8~138| (car |\x0;temp~1on7G8~136|))) (let ((|\x0;keyword~1on7G8~123| |\x0;temp~1on7G8~138|)) (let ((|\x0;temp~1on7G8~137| (cdr |\x0;temp~1on7G8~136|))) (let ((|\x0;pattern~1on7G8~124| |\x0;temp~1on7G8~137|)) (let ((|\x0;temp~1on7G8~129| (cdr |\x0;input~1on7G8~107|))) (if (pair? |\x0;temp~1on7G8~129|) (let ((|\x0;temp~1on7G8~131| (car |\x0;temp~1on7G8~129|))) (if (pair? |\x0;temp~1on7G8~131|) (let ((|\x0;temp~1on7G8~135| (car |\x0;temp~1on7G8~131|))) (if (and (ex:identifier? |\x0;temp~1on7G8~135|) (ex:free-identifier=? |\x0;temp~1on7G8~135| (ex:syntax-rename 'syntax-error '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)))) (let ((|\x0;temp~1on7G8~132| (cdr |\x0;temp~1on7G8~131|))) (if (pair? |\x0;temp~1on7G8~132|) (let ((|\x0;temp~1on7G8~134| (car |\x0;temp~1on7G8~132|))) (let ((|\x0;msg~1on7G8~125| |\x0;temp~1on7G8~134|)) (let ((|\x0;temp~1on7G8~133| (cdr |\x0;temp~1on7G8~132|))) (if (list? |\x0;temp~1on7G8~133|) (let ((|\x0;irritant1~1on7G8~126| |\x0;temp~1on7G8~133|)) (let ((|\x0;temp~1on7G8~130| (cdr |\x0;temp~1on7G8~129|))) (if (null? |\x0;temp~1on7G8~130|) (cons (cons (ex:syntax-rename 'dummy '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) |\x0;pattern~1on7G8~124|) (cons (cons (ex:syntax-rename 'syntax-violation '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) (cons (ex:syntax-rename 'syntax-error '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) (cons |\x0;msg~1on7G8~125| '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'dummy '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) |\x0;pattern~1on7G8~124|) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'irritants: '() '(|\x0;env~1on7G8~128|) 0 '(core syntax-rules)) |\x0;irritant1~1on7G8~126|) '())) '()))))) '())) (|\x0;fail~1on7G8~108|)))) (|\x0;fail~1on7G8~108|))))) (|\x0;fail~1on7G8~108|))) (|\x0;fail~1on7G8~108|))) (|\x0;fail~1on7G8~108|))) (|\x0;fail~1on7G8~108|))))))) (|\x0;fail~1on7G8~108|))) (|\x0;fail~1on7G8~108|)))))) (let ((|\x0;input~1on7G8~63| |\x0;x~1on7G8~60|)) (let ((|\x0;fail~1on7G8~64| (lambda () (let ((|\x0;fail~1on7G8~65| (lambda () (ex:invalid-form |\x0;input~1on7G8~63|)))) (if (pair? |\x0;input~1on7G8~63|) (let ((|\x0;temp~1on7G8~87| (car |\x0;input~1on7G8~63|))) (let ((|\x0;temp~1on7G8~82| (cdr |\x0;input~1on7G8~63|))) (if (pair? |\x0;temp~1on7G8~82|) (let ((|\x0;temp~1on7G8~86| (car |\x0;temp~1on7G8~82|))) (let ((|\x0;ellipsis~1on7G8~66| |\x0;temp~1on7G8~86|)) (let ((|\x0;temp~1on7G8~83| (cdr |\x0;temp~1on7G8~82|))) (if (pair? |\x0;temp~1on7G8~83|) (let ((|\x0;temp~1on7G8~85| (car |\x0;temp~1on7G8~83|))) (if (list? |\x0;temp~1on7G8~85|) (let ((|\x0;k~1on7G8~67| |\x0;temp~1on7G8~85|)) (let ((|\x0;temp~1on7G8~84| (cdr |\x0;temp~1on7G8~83|))) (if (list? |\x0;temp~1on7G8~84|) (let ((|\x0;cl~1on7G8~68| |\x0;temp~1on7G8~84|)) (if (if (ex:identifier? |\x0;ellipsis~1on7G8~66|) (for-all ex:identifier? |\x0;k~1on7G8~67|) #f) (let ((|\x0;input~1on7G8~75| (map |\x0;clause~1on7G8~61| |\x0;cl~1on7G8~68|))) (let ((|\x0;fail~1on7G8~77| (lambda () (ex:invalid-form |\x0;input~1on7G8~75|)))) (if (list? |\x0;input~1on7G8~75|) (let ((|\x0;cl~1on7G8~78| |\x0;input~1on7G8~75|)) (begin (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~81|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~81|) 0 '(core syntax-rules)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1on7G8~81|) 0 '(core syntax-rules)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~81|) 0 '(core syntax-rules)) (cons |\x0;ellipsis~1on7G8~66| (cons |\x0;k~1on7G8~67| |\x0;cl~1on7G8~78|)))) '()))))) (|\x0;fail~1on7G8~77|)))) (|\x0;fail~1on7G8~65|))) (|\x0;fail~1on7G8~65|)))) (|\x0;fail~1on7G8~65|))) (|\x0;fail~1on7G8~65|))))) (|\x0;fail~1on7G8~65|)))) (|\x0;fail~1on7G8~65|)))))) (if (pair? |\x0;input~1on7G8~63|) (let ((|\x0;temp~1on7G8~103| (car |\x0;input~1on7G8~63|))) (let ((|\x0;temp~1on7G8~100| (cdr |\x0;input~1on7G8~63|))) (if (pair? |\x0;temp~1on7G8~100|) (let ((|\x0;temp~1on7G8~102| (car |\x0;temp~1on7G8~100|))) (if (list? |\x0;temp~1on7G8~102|) (let ((|\x0;k~1on7G8~88| |\x0;temp~1on7G8~102|)) (let ((|\x0;temp~1on7G8~101| (cdr |\x0;temp~1on7G8~100|))) (if (list? |\x0;temp~1on7G8~101|) (let ((|\x0;cl~1on7G8~89| |\x0;temp~1on7G8~101|)) (if (for-all ex:identifier? |\x0;k~1on7G8~88|) (let ((|\x0;input~1on7G8~93| (map |\x0;clause~1on7G8~61| |\x0;cl~1on7G8~89|))) (let ((|\x0;fail~1on7G8~95| (lambda () (ex:invalid-form |\x0;input~1on7G8~93|)))) (if (list? |\x0;input~1on7G8~93|) (let ((|\x0;cl~1on7G8~96| |\x0;input~1on7G8~93|)) (begin (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~99|) 0 '(core syntax-rules)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~99|) 0 '(core syntax-rules)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1on7G8~99|) 0 '(core syntax-rules)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~99|) 0 '(core syntax-rules)) (cons |\x0;k~1on7G8~88| |\x0;cl~1on7G8~96|))) '()))))) (|\x0;fail~1on7G8~95|)))) (|\x0;fail~1on7G8~64|))) (|\x0;fail~1on7G8~64|)))) (|\x0;fail~1on7G8~64|))) (|\x0;fail~1on7G8~64|)))) (|\x0;fail~1on7G8~64|))))) ex:undefined))) (ex:register-macro! '|\x0;syntax-error~1on7G8~139| (lambda (|\x0;exp~1on7G8~141|) (ex:syntax-violation 'syntax-error "R7RS syntax-error used outside template position" |\x0;exp~1on7G8~141|))) (values)) (lambda () (values)) '|\x0;build~1on7G8~143|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core let) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~227| 0 1 2 3) (|\x0;env~1on7G8~203| 4 5 6 3) (|\x0;env~1on7G8~179| 7 8 9 3) (|\x0;env~1on7G8~158| 10 8 9 3)) (10 (((f) . #f) ((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (9 (((x) variable |\x0;x~1on7G8~146| (1) #f (core let)))) (8 ()) (7 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (6 (((x) variable |\x0;x~1on7G8~194| (1) #f (core let)))) (5 ()) (4 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (3 (((letrec*) macro |\x0;letrec*~1on7G8~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1on7G8~192| (0) #f (core let)) ((let) macro |\x0;let~1on7G8~144| (0) #f (core let)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((with-syntax) macro |\x0;with-syntax~1on7G8~3| (1) #f (core with-syntax)) ((for-all) variable for-all (1) #f ()))) (2 (((x) variable |\x0;x~1on7G8~218| (1) #f (core let)))) (1 ()) (0 (((i) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f)))))) '((let macro |\x0;let~1on7G8~144| (0) #f (core let)) (letrec macro |\x0;letrec~1on7G8~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1on7G8~216| (0) #f (core let))) '(((core with-syntax) 1) ((core primitives) 1 0)) '(|\x0;build~1on7G8~57| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;let~1on7G8~144| (lambda (|\x0;x~1on7G8~146|) (let ((|\x0;input~1on7G8~148| |\x0;x~1on7G8~146|)) (let ((|\x0;fail~1on7G8~149| (lambda () (let ((|\x0;fail~1on7G8~150| (lambda () (ex:invalid-form |\x0;input~1on7G8~148|)))) (if (pair? |\x0;input~1on7G8~148|) (let ((|\x0;temp~1on7G8~172| (car |\x0;input~1on7G8~148|))) (let ((|\x0;temp~1on7G8~159| (cdr |\x0;input~1on7G8~148|))) (if (pair? |\x0;temp~1on7G8~159|) (let ((|\x0;temp~1on7G8~171| (car |\x0;temp~1on7G8~159|))) (let ((|\x0;f~1on7G8~151| |\x0;temp~1on7G8~171|)) (let ((|\x0;temp~1on7G8~160| (cdr |\x0;temp~1on7G8~159|))) (if (pair? |\x0;temp~1on7G8~160|) (let ((|\x0;temp~1on7G8~164| (car |\x0;temp~1on7G8~160|))) (ex:map-while (lambda (|\x0;temp~1on7G8~164|) (if (pair? |\x0;temp~1on7G8~164|) (let ((|\x0;temp~1on7G8~170| (car |\x0;temp~1on7G8~164|))) (let ((|\x0;x~1on7G8~152| |\x0;temp~1on7G8~170|)) (let ((|\x0;temp~1on7G8~167| (cdr |\x0;temp~1on7G8~164|))) (if (pair? |\x0;temp~1on7G8~167|) (let ((|\x0;temp~1on7G8~169| (car |\x0;temp~1on7G8~167|))) (let ((|\x0;v~1on7G8~153| |\x0;temp~1on7G8~169|)) (let ((|\x0;temp~1on7G8~168| (cdr |\x0;temp~1on7G8~167|))) (if (null? |\x0;temp~1on7G8~168|) (list |\x0;x~1on7G8~152| |\x0;v~1on7G8~153|) #f)))) #f)))) #f)) |\x0;temp~1on7G8~164| (lambda (|\x0;cols~1on7G8~166| |\x0;rest~1on7G8~165|) (if (null? |\x0;rest~1on7G8~165|) (apply (lambda (|\x0;x~1on7G8~152| |\x0;v~1on7G8~153|) (let ((|\x0;temp~1on7G8~161| (cdr |\x0;temp~1on7G8~160|))) (if (pair? |\x0;temp~1on7G8~161|) (let ((|\x0;temp~1on7G8~163| (car |\x0;temp~1on7G8~161|))) (let ((|\x0;e1~1on7G8~154| |\x0;temp~1on7G8~163|)) (let ((|\x0;temp~1on7G8~162| (cdr |\x0;temp~1on7G8~161|))) (if (list? |\x0;temp~1on7G8~162|) (let ((|\x0;e2~1on7G8~155| |\x0;temp~1on7G8~162|)) (if (for-all ex:identifier? (cons |\x0;f~1on7G8~151| |\x0;x~1on7G8~152|)) (cons (ex:syntax-rename 'letrec '() '(|\x0;env~1on7G8~158|) 0 '(core let)) (cons (cons (cons |\x0;f~1on7G8~151| (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~158|) 0 '(core let)) (cons |\x0;x~1on7G8~152| (cons |\x0;e1~1on7G8~154| |\x0;e2~1on7G8~155|))) '())) '()) (cons (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~158|) 0 '(core let)) (cons |\x0;x~1on7G8~152| (cons (cons |\x0;f~1on7G8~151| |\x0;x~1on7G8~152|) '()))) |\x0;v~1on7G8~153|) '()))) (|\x0;fail~1on7G8~150|))) (|\x0;fail~1on7G8~150|))))) (|\x0;fail~1on7G8~150|)))) (if (null? |\x0;cols~1on7G8~166|) '(() ()) (apply map list |\x0;cols~1on7G8~166|))) (|\x0;fail~1on7G8~150|))))) (|\x0;fail~1on7G8~150|))))) (|\x0;fail~1on7G8~150|)))) (|\x0;fail~1on7G8~150|)))))) (if (pair? |\x0;input~1on7G8~148|) (let ((|\x0;temp~1on7G8~191| (car |\x0;input~1on7G8~148|))) (let ((|\x0;temp~1on7G8~180| (cdr |\x0;input~1on7G8~148|))) (if (pair? |\x0;temp~1on7G8~180|) (let ((|\x0;temp~1on7G8~184| (car |\x0;temp~1on7G8~180|))) (ex:map-while (lambda (|\x0;temp~1on7G8~184|) (if (pair? |\x0;temp~1on7G8~184|) (let ((|\x0;temp~1on7G8~190| (car |\x0;temp~1on7G8~184|))) (let ((|\x0;x~1on7G8~173| |\x0;temp~1on7G8~190|)) (let ((|\x0;temp~1on7G8~187| (cdr |\x0;temp~1on7G8~184|))) (if (pair? |\x0;temp~1on7G8~187|) (let ((|\x0;temp~1on7G8~189| (car |\x0;temp~1on7G8~187|))) (let ((|\x0;v~1on7G8~174| |\x0;temp~1on7G8~189|)) (let ((|\x0;temp~1on7G8~188| (cdr |\x0;temp~1on7G8~187|))) (if (null? |\x0;temp~1on7G8~188|) (list |\x0;x~1on7G8~173| |\x0;v~1on7G8~174|) #f)))) #f)))) #f)) |\x0;temp~1on7G8~184| (lambda (|\x0;cols~1on7G8~186| |\x0;rest~1on7G8~185|) (if (null? |\x0;rest~1on7G8~185|) (apply (lambda (|\x0;x~1on7G8~173| |\x0;v~1on7G8~174|) (let ((|\x0;temp~1on7G8~181| (cdr |\x0;temp~1on7G8~180|))) (if (pair? |\x0;temp~1on7G8~181|) (let ((|\x0;temp~1on7G8~183| (car |\x0;temp~1on7G8~181|))) (let ((|\x0;e1~1on7G8~175| |\x0;temp~1on7G8~183|)) (let ((|\x0;temp~1on7G8~182| (cdr |\x0;temp~1on7G8~181|))) (if (list? |\x0;temp~1on7G8~182|) (let ((|\x0;e2~1on7G8~176| |\x0;temp~1on7G8~182|)) (if (for-all ex:identifier? |\x0;x~1on7G8~173|) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~179|) 0 '(core let)) (cons |\x0;x~1on7G8~173| (cons |\x0;e1~1on7G8~175| |\x0;e2~1on7G8~176|))) |\x0;v~1on7G8~174|) (|\x0;fail~1on7G8~149|))) (|\x0;fail~1on7G8~149|))))) (|\x0;fail~1on7G8~149|)))) (if (null? |\x0;cols~1on7G8~186|) '(() ()) (apply map list |\x0;cols~1on7G8~186|))) (|\x0;fail~1on7G8~149|))))) (|\x0;fail~1on7G8~149|)))) (|\x0;fail~1on7G8~149|)))))) (ex:register-macro! '|\x0;letrec~1on7G8~192| (lambda (|\x0;x~1on7G8~194|) (let ((|\x0;input~1on7G8~196| |\x0;x~1on7G8~194|)) (let ((|\x0;fail~1on7G8~197| (lambda () (ex:invalid-form |\x0;input~1on7G8~196|)))) (if (pair? |\x0;input~1on7G8~196|) (let ((|\x0;temp~1on7G8~215| (car |\x0;input~1on7G8~196|))) (let ((|\x0;temp~1on7G8~204| (cdr |\x0;input~1on7G8~196|))) (if (pair? |\x0;temp~1on7G8~204|) (let ((|\x0;temp~1on7G8~208| (car |\x0;temp~1on7G8~204|))) (ex:map-while (lambda (|\x0;temp~1on7G8~208|) (if (pair? |\x0;temp~1on7G8~208|) (let ((|\x0;temp~1on7G8~214| (car |\x0;temp~1on7G8~208|))) (let ((|\x0;i~1on7G8~198| |\x0;temp~1on7G8~214|)) (let ((|\x0;temp~1on7G8~211| (cdr |\x0;temp~1on7G8~208|))) (if (pair? |\x0;temp~1on7G8~211|) (let ((|\x0;temp~1on7G8~213| (car |\x0;temp~1on7G8~211|))) (let ((|\x0;v~1on7G8~199| |\x0;temp~1on7G8~213|)) (let ((|\x0;temp~1on7G8~212| (cdr |\x0;temp~1on7G8~211|))) (if (null? |\x0;temp~1on7G8~212|) (list |\x0;i~1on7G8~198| |\x0;v~1on7G8~199|) #f)))) #f)))) #f)) |\x0;temp~1on7G8~208| (lambda (|\x0;cols~1on7G8~210| |\x0;rest~1on7G8~209|) (if (null? |\x0;rest~1on7G8~209|) (apply (lambda (|\x0;i~1on7G8~198| |\x0;v~1on7G8~199|) (let ((|\x0;temp~1on7G8~205| (cdr |\x0;temp~1on7G8~204|))) (if (pair? |\x0;temp~1on7G8~205|) (let ((|\x0;temp~1on7G8~207| (car |\x0;temp~1on7G8~205|))) (let ((|\x0;e1~1on7G8~200| |\x0;temp~1on7G8~207|)) (let ((|\x0;temp~1on7G8~206| (cdr |\x0;temp~1on7G8~205|))) (if (list? |\x0;temp~1on7G8~206|) (let ((|\x0;e2~1on7G8~201| |\x0;temp~1on7G8~206|)) (cons (ex:syntax-rename 'letrec* '() '(|\x0;env~1on7G8~203|) 0 '(core let)) (cons (if (= (length |\x0;i~1on7G8~198|) (length |\x0;v~1on7G8~199|)) (map (lambda (|\x0;i~1on7G8~198| |\x0;v~1on7G8~199|) (cons |\x0;i~1on7G8~198| (cons |\x0;v~1on7G8~199| '()))) |\x0;i~1on7G8~198| |\x0;v~1on7G8~199|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((i v) ...) (list |\x0;i~1on7G8~198| |\x0;v~1on7G8~199|))) (cons |\x0;e1~1on7G8~200| |\x0;e2~1on7G8~201|)))) (|\x0;fail~1on7G8~197|))))) (|\x0;fail~1on7G8~197|)))) (if (null? |\x0;cols~1on7G8~210|) '(() ()) (apply map list |\x0;cols~1on7G8~210|))) (|\x0;fail~1on7G8~197|))))) (|\x0;fail~1on7G8~197|)))) (|\x0;fail~1on7G8~197|)))))) (ex:register-macro! '|\x0;letrec*~1on7G8~216| (lambda (|\x0;x~1on7G8~218|) (let ((|\x0;input~1on7G8~220| |\x0;x~1on7G8~218|)) (let ((|\x0;fail~1on7G8~221| (lambda () (ex:invalid-form |\x0;input~1on7G8~220|)))) (if (pair? |\x0;input~1on7G8~220|) (let ((|\x0;temp~1on7G8~239| (car |\x0;input~1on7G8~220|))) (let ((|\x0;temp~1on7G8~228| (cdr |\x0;input~1on7G8~220|))) (if (pair? |\x0;temp~1on7G8~228|) (let ((|\x0;temp~1on7G8~232| (car |\x0;temp~1on7G8~228|))) (ex:map-while (lambda (|\x0;temp~1on7G8~232|) (if (pair? |\x0;temp~1on7G8~232|) (let ((|\x0;temp~1on7G8~238| (car |\x0;temp~1on7G8~232|))) (let ((|\x0;i~1on7G8~222| |\x0;temp~1on7G8~238|)) (let ((|\x0;temp~1on7G8~235| (cdr |\x0;temp~1on7G8~232|))) (if (pair? |\x0;temp~1on7G8~235|) (let ((|\x0;temp~1on7G8~237| (car |\x0;temp~1on7G8~235|))) (let ((|\x0;v~1on7G8~223| |\x0;temp~1on7G8~237|)) (let ((|\x0;temp~1on7G8~236| (cdr |\x0;temp~1on7G8~235|))) (if (null? |\x0;temp~1on7G8~236|) (list |\x0;i~1on7G8~222| |\x0;v~1on7G8~223|) #f)))) #f)))) #f)) |\x0;temp~1on7G8~232| (lambda (|\x0;cols~1on7G8~234| |\x0;rest~1on7G8~233|) (if (null? |\x0;rest~1on7G8~233|) (apply (lambda (|\x0;i~1on7G8~222| |\x0;v~1on7G8~223|) (let ((|\x0;temp~1on7G8~229| (cdr |\x0;temp~1on7G8~228|))) (if (pair? |\x0;temp~1on7G8~229|) (let ((|\x0;temp~1on7G8~231| (car |\x0;temp~1on7G8~229|))) (let ((|\x0;e1~1on7G8~224| |\x0;temp~1on7G8~231|)) (let ((|\x0;temp~1on7G8~230| (cdr |\x0;temp~1on7G8~229|))) (if (list? |\x0;temp~1on7G8~230|) (let ((|\x0;e2~1on7G8~225| |\x0;temp~1on7G8~230|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~227|) 0 '(core let)) (cons '() (append (if (= (length |\x0;i~1on7G8~222|) (length |\x0;v~1on7G8~223|)) (map (lambda (|\x0;i~1on7G8~222| |\x0;v~1on7G8~223|) (cons (ex:syntax-rename 'define '() '(|\x0;env~1on7G8~227|) 0 '(core let)) (cons |\x0;i~1on7G8~222| (cons |\x0;v~1on7G8~223| '())))) |\x0;i~1on7G8~222| |\x0;v~1on7G8~223|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((define i v) ... (let () e1 e2 ...)) (list |\x0;i~1on7G8~222| |\x0;v~1on7G8~223|))) (cons (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~227|) 0 '(core let)) (cons '() (cons |\x0;e1~1on7G8~224| |\x0;e2~1on7G8~225|))) '()))))) (|\x0;fail~1on7G8~221|))))) (|\x0;fail~1on7G8~221|)))) (if (null? |\x0;cols~1on7G8~234|) '(() ()) (apply map list |\x0;cols~1on7G8~234|))) (|\x0;fail~1on7G8~221|))))) (|\x0;fail~1on7G8~221|)))) (|\x0;fail~1on7G8~221|)))))) (values)) (lambda () (values)) '|\x0;build~1on7G8~240|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core derived) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~563| 0 1 2 3) (|\x0;env~1on7G8~555| 4 1 2 3) (|\x0;env~1on7G8~531| 5 1 2 3) (|\x0;env~1on7G8~513| 6 1 2 3) (|\x0;env~1on7G8~493| 7 1 2 3) (|\x0;env~1on7G8~475| 8 1 2 3) (|\x0;env~1on7G8~456| 9 1 2 3) (|\x0;env~1on7G8~426| 10 11 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~420| 19 11 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~411| 20 11 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~403| 21 11 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~386| 22 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~377| 25 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~369| 26 23 24 12 13 14 15 16 17 18 3) (|\x0;env~1on7G8~313| 27 28 29 3) (|\x0;env~1on7G8~291| 30 31 32 33 34 35 28 29 3) (|\x0;env~1on7G8~281| 36 37 31 32 33 34 35 28 29 3)) (37 (((x) . #f) ((v) . #f) ((rest) . #f))) (36 (((body) . #f))) (35 (((x) . #f) ((v) . #f) ((e1) . #f) ((e2) . #f))) (34 ()) (33 (((f) variable |\x0;f~1on7G8~258| (1) #f (core derived)))) (32 (((bindings) variable |\x0;bindings~1on7G8~265| (1) #f (core derived)))) (31 ()) (30 (((x) . #f) ((v) . #f))) (29 (((x) variable |\x0;x~1on7G8~243| (1) #f (core derived)))) (28 ()) (27 (((e1) . #f) ((e2) . #f))) (26 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (25 (((e0) . #f) ((e1) . #f))) (24 (((c2) . #f) ((c3) . #f))) (23 (((rest) . #f))) (22 (((e0) . #f))) (21 (((e0) . #f) ((e1) . #f) ((e2) . #f))) (20 (((e0) . #f) ((e1) . #f))) (19 (((e0) . #f))) (18 (((x) variable |\x0;x~1on7G8~322| (1) #f (core derived)))) (17 ()) (16 (((c1) . #f) ((c2) . #f))) (15 ()) (14 (((f) variable |\x0;f~1on7G8~333| (1) #f (core derived)))) (13 (((c1) variable |\x0;c1~1on7G8~342| (1) #f (core derived)) ((c2*) variable |\x0;c2*~1on7G8~343| (1) #f (core derived)))) (12 ()) (11 ()) (10 (((e1) . #f) ((e2) . #f))) (9 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((atoms) . #f) ((result1) . #f) ((result2) . #f) ((clause) . #f) ((clauses) . #f))) (8 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((atoms) . #f) ((result1) . #f) ((result2) . #f))) (7 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((atoms) . #f) ((result) . #f) ((clause) . #f) ((clauses) . #f))) (6 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((atoms) . #f) ((result) . #f))) (5 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((result1) . #f) ((result2) . #f))) (4 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((result) . #f))) (3 (((else) macro |\x0;else~1on7G8~572| (0) #f (core derived)) ((=>) macro |\x0;=>~1on7G8~568| (0) #f (core derived)) ((case) macro |\x0;case~1on7G8~435| (0) #f (core derived)) ((cond) macro |\x0;cond~1on7G8~320| (0) #f (core derived)) ((let*) macro |\x0;let*~1on7G8~241| (0) #f (core derived)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((letrec*) macro |\x0;letrec*~1on7G8~216| (1 0) #f (core let)) ((letrec) macro |\x0;letrec~1on7G8~192| (1 0) #f (core let)) ((let) macro |\x0;let~1on7G8~144| (1 0) #f (core let)) ((with-syntax) macro |\x0;with-syntax~1on7G8~3| (1) #f (core with-syntax)) ((r7rs:syntax-error) macro |\x0;syntax-error~1on7G8~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1on7G8~58| (1) #f (core syntax-rules)) ((cdr) variable cdr (1 0) #f ()) ((car) variable car (1 0) #f ()) ((memv) variable memv (1 0) #f ()) ((null?) variable null? (1 0) #f ()) ((for-all) variable for-all (1 0) #f ()))) (2 (((x |\x0;c~1on7G8~436|) variable |\x0;x~1on7G8~438| (0) #f (core derived)))) (1 ()) (0 (((dummy |\x0;c~1on7G8~436|) . #f) ((key) . #f) ((clauses) . #f)))))) '((let* macro |\x0;let*~1on7G8~241| (0) #f (core derived)) (cond macro |\x0;cond~1on7G8~320| (0) #f (core derived)) (case macro |\x0;case~1on7G8~435| (0) #f (core derived)) (else macro |\x0;else~1on7G8~572| (0) #f (core derived)) (=> macro |\x0;=>~1on7G8~568| (0) #f (core derived))) '(((core syntax-rules) 1) ((core with-syntax) 1) ((core let) 1 0) ((core primitives) 1 0)) '(|\x0;build~1on7G8~143| |\x0;build~1on7G8~57| |\x0;build~1on7G8~240| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;let*~1on7G8~241| (lambda (|\x0;x~1on7G8~243|) (let ((|\x0;input~1on7G8~245| |\x0;x~1on7G8~243|)) (let ((|\x0;fail~1on7G8~246| (lambda () (let ((|\x0;fail~1on7G8~247| (lambda () (ex:invalid-form |\x0;input~1on7G8~245|)))) (if (pair? |\x0;input~1on7G8~245|) (let ((|\x0;temp~1on7G8~309| (car |\x0;input~1on7G8~245|))) (let ((|\x0;temp~1on7G8~298| (cdr |\x0;input~1on7G8~245|))) (if (pair? |\x0;temp~1on7G8~298|) (let ((|\x0;temp~1on7G8~302| (car |\x0;temp~1on7G8~298|))) (ex:map-while (lambda (|\x0;temp~1on7G8~302|) (if (pair? |\x0;temp~1on7G8~302|) (let ((|\x0;temp~1on7G8~308| (car |\x0;temp~1on7G8~302|))) (let ((|\x0;x~1on7G8~248| |\x0;temp~1on7G8~308|)) (let ((|\x0;temp~1on7G8~305| (cdr |\x0;temp~1on7G8~302|))) (if (pair? |\x0;temp~1on7G8~305|) (let ((|\x0;temp~1on7G8~307| (car |\x0;temp~1on7G8~305|))) (let ((|\x0;v~1on7G8~249| |\x0;temp~1on7G8~307|)) (let ((|\x0;temp~1on7G8~306| (cdr |\x0;temp~1on7G8~305|))) (if (null? |\x0;temp~1on7G8~306|) (list |\x0;x~1on7G8~248| |\x0;v~1on7G8~249|) #f)))) #f)))) #f)) |\x0;temp~1on7G8~302| (lambda (|\x0;cols~1on7G8~304| |\x0;rest~1on7G8~303|) (if (null? |\x0;rest~1on7G8~303|) (apply (lambda (|\x0;x~1on7G8~248| |\x0;v~1on7G8~249|) (let ((|\x0;temp~1on7G8~299| (cdr |\x0;temp~1on7G8~298|))) (if (pair? |\x0;temp~1on7G8~299|) (let ((|\x0;temp~1on7G8~301| (car |\x0;temp~1on7G8~299|))) (let ((|\x0;e1~1on7G8~250| |\x0;temp~1on7G8~301|)) (let ((|\x0;temp~1on7G8~300| (cdr |\x0;temp~1on7G8~299|))) (if (list? |\x0;temp~1on7G8~300|) (let ((|\x0;e2~1on7G8~251| |\x0;temp~1on7G8~300|)) (if (for-all ex:identifier? |\x0;x~1on7G8~248|) ((lambda () ((lambda (|\x0;f~1on7G8~258|) (set! |\x0;f~1on7G8~258| (lambda (|\x0;bindings~1on7G8~265|) (let ((|\x0;input~1on7G8~267| |\x0;bindings~1on7G8~265|)) (let ((|\x0;fail~1on7G8~268| (lambda () (let ((|\x0;fail~1on7G8~269| (lambda () (ex:invalid-form |\x0;input~1on7G8~267|)))) (if (pair? |\x0;input~1on7G8~267|) (let ((|\x0;temp~1on7G8~283| (car |\x0;input~1on7G8~267|))) (if (pair? |\x0;temp~1on7G8~283|) (let ((|\x0;temp~1on7G8~287| (car |\x0;temp~1on7G8~283|))) (let ((|\x0;x~1on7G8~270| |\x0;temp~1on7G8~287|)) (let ((|\x0;temp~1on7G8~284| (cdr |\x0;temp~1on7G8~283|))) (if (pair? |\x0;temp~1on7G8~284|) (let ((|\x0;temp~1on7G8~286| (car |\x0;temp~1on7G8~284|))) (let ((|\x0;v~1on7G8~271| |\x0;temp~1on7G8~286|)) (let ((|\x0;temp~1on7G8~285| (cdr |\x0;temp~1on7G8~284|))) (if (null? |\x0;temp~1on7G8~285|) (let ((|\x0;temp~1on7G8~282| (cdr |\x0;input~1on7G8~267|))) (let ((|\x0;rest~1on7G8~272| |\x0;temp~1on7G8~282|)) (let ((|\x0;input~1on7G8~275| (|\x0;f~1on7G8~258| |\x0;rest~1on7G8~272|))) (let ((|\x0;fail~1on7G8~277| (lambda () (ex:invalid-form |\x0;input~1on7G8~275|)))) (let ((|\x0;body~1on7G8~278| |\x0;input~1on7G8~275|)) (begin (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~281|) 0 '(core derived)) (cons (cons (cons |\x0;x~1on7G8~270| (cons |\x0;v~1on7G8~271| '())) '()) (cons |\x0;body~1on7G8~278| '()))))))))) (|\x0;fail~1on7G8~269|))))) (|\x0;fail~1on7G8~269|))))) (|\x0;fail~1on7G8~269|))) (|\x0;fail~1on7G8~269|)))))) (if (pair? |\x0;input~1on7G8~267|) (let ((|\x0;temp~1on7G8~293| (car |\x0;input~1on7G8~267|))) (if (pair? |\x0;temp~1on7G8~293|) (let ((|\x0;temp~1on7G8~297| (car |\x0;temp~1on7G8~293|))) (let ((|\x0;x~1on7G8~288| |\x0;temp~1on7G8~297|)) (let ((|\x0;temp~1on7G8~294| (cdr |\x0;temp~1on7G8~293|))) (if (pair? |\x0;temp~1on7G8~294|) (let ((|\x0;temp~1on7G8~296| (car |\x0;temp~1on7G8~294|))) (let ((|\x0;v~1on7G8~289| |\x0;temp~1on7G8~296|)) (let ((|\x0;temp~1on7G8~295| (cdr |\x0;temp~1on7G8~294|))) (if (null? |\x0;temp~1on7G8~295|) (let ((|\x0;temp~1on7G8~292| (cdr |\x0;input~1on7G8~267|))) (if (null? |\x0;temp~1on7G8~292|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~291|) 0 '(core derived)) (cons (cons (cons |\x0;x~1on7G8~288| (cons |\x0;v~1on7G8~289| '())) '()) (cons |\x0;e1~1on7G8~250| |\x0;e2~1on7G8~251|))) (|\x0;fail~1on7G8~268|))) (|\x0;fail~1on7G8~268|))))) (|\x0;fail~1on7G8~268|))))) (|\x0;fail~1on7G8~268|))) (|\x0;fail~1on7G8~268|)))))) ((lambda () ((lambda (|\x0;bindings~1on7G8~262|) (|\x0;f~1on7G8~258| |\x0;bindings~1on7G8~262|)) (if (= (length |\x0;x~1on7G8~248|) (length |\x0;v~1on7G8~249|)) (map (lambda (|\x0;x~1on7G8~248| |\x0;v~1on7G8~249|) (cons |\x0;x~1on7G8~248| (cons |\x0;v~1on7G8~249| '()))) |\x0;x~1on7G8~248| |\x0;v~1on7G8~249|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((x v) ...) (list |\x0;x~1on7G8~248| |\x0;v~1on7G8~249|))))))) ex:undefined))) (|\x0;fail~1on7G8~247|))) (|\x0;fail~1on7G8~247|))))) (|\x0;fail~1on7G8~247|)))) (if (null? |\x0;cols~1on7G8~304|) '(() ()) (apply map list |\x0;cols~1on7G8~304|))) (|\x0;fail~1on7G8~247|))))) (|\x0;fail~1on7G8~247|)))) (|\x0;fail~1on7G8~247|)))))) (if (pair? |\x0;input~1on7G8~245|) (let ((|\x0;temp~1on7G8~319| (car |\x0;input~1on7G8~245|))) (let ((|\x0;temp~1on7G8~314| (cdr |\x0;input~1on7G8~245|))) (if (pair? |\x0;temp~1on7G8~314|) (let ((|\x0;temp~1on7G8~318| (car |\x0;temp~1on7G8~314|))) (if (null? |\x0;temp~1on7G8~318|) (let ((|\x0;temp~1on7G8~315| (cdr |\x0;temp~1on7G8~314|))) (if (pair? |\x0;temp~1on7G8~315|) (let ((|\x0;temp~1on7G8~317| (car |\x0;temp~1on7G8~315|))) (let ((|\x0;e1~1on7G8~310| |\x0;temp~1on7G8~317|)) (let ((|\x0;temp~1on7G8~316| (cdr |\x0;temp~1on7G8~315|))) (if (list? |\x0;temp~1on7G8~316|) (let ((|\x0;e2~1on7G8~311| |\x0;temp~1on7G8~316|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~313|) 0 '(core derived)) (cons '() (cons |\x0;e1~1on7G8~310| |\x0;e2~1on7G8~311|)))) (|\x0;fail~1on7G8~246|))))) (|\x0;fail~1on7G8~246|))) (|\x0;fail~1on7G8~246|))) (|\x0;fail~1on7G8~246|)))) (|\x0;fail~1on7G8~246|)))))) (ex:register-macro! '|\x0;cond~1on7G8~320| (lambda (|\x0;x~1on7G8~322|) (let ((|\x0;input~1on7G8~324| |\x0;x~1on7G8~322|)) (let ((|\x0;fail~1on7G8~325| (lambda () (ex:invalid-form |\x0;input~1on7G8~324|)))) (if (pair? |\x0;input~1on7G8~324|) (let ((|\x0;temp~1on7G8~434| (car |\x0;input~1on7G8~324|))) (let ((|\x0;temp~1on7G8~431| (cdr |\x0;input~1on7G8~324|))) (if (pair? |\x0;temp~1on7G8~431|) (let ((|\x0;temp~1on7G8~433| (car |\x0;temp~1on7G8~431|))) (let ((|\x0;c1~1on7G8~326| |\x0;temp~1on7G8~433|)) (let ((|\x0;temp~1on7G8~432| (cdr |\x0;temp~1on7G8~431|))) (if (list? |\x0;temp~1on7G8~432|) (let ((|\x0;c2~1on7G8~327| |\x0;temp~1on7G8~432|)) ((lambda () ((lambda (|\x0;f~1on7G8~333|) (set! |\x0;f~1on7G8~333| (lambda (|\x0;c1~1on7G8~342| |\x0;c2*~1on7G8~343|) (let ((|\x0;input~1on7G8~345| |\x0;c2*~1on7G8~343|)) (let ((|\x0;fail~1on7G8~346| (lambda () (let ((|\x0;fail~1on7G8~347| (lambda () (ex:invalid-form |\x0;input~1on7G8~345|)))) (if (pair? |\x0;input~1on7G8~345|) (let ((|\x0;temp~1on7G8~390| (car |\x0;input~1on7G8~345|))) (let ((|\x0;c2~1on7G8~348| |\x0;temp~1on7G8~390|)) (let ((|\x0;temp~1on7G8~389| (cdr |\x0;input~1on7G8~345|))) (if (list? |\x0;temp~1on7G8~389|) (let ((|\x0;c3~1on7G8~349| |\x0;temp~1on7G8~389|)) (let ((|\x0;input~1on7G8~352| (|\x0;f~1on7G8~333| |\x0;c2~1on7G8~348| |\x0;c3~1on7G8~349|))) (let ((|\x0;fail~1on7G8~355| (lambda () (ex:invalid-form |\x0;input~1on7G8~352|)))) (let ((|\x0;rest~1on7G8~356| |\x0;input~1on7G8~352|)) (begin (let ((|\x0;input~1on7G8~359| |\x0;c1~1on7G8~342|)) (let ((|\x0;fail~1on7G8~360| (lambda () (let ((|\x0;fail~1on7G8~361| (lambda () (let ((|\x0;fail~1on7G8~362| (lambda () (let ((|\x0;fail~1on7G8~363| (lambda () (ex:invalid-form |\x0;input~1on7G8~359|)))) (ex:syntax-violation 'cond "Invalid expression" |\x0;x~1on7G8~322|))))) (if (pair? |\x0;input~1on7G8~359|) (let ((|\x0;temp~1on7G8~373| (car |\x0;input~1on7G8~359|))) (let ((|\x0;e0~1on7G8~365| |\x0;temp~1on7G8~373|)) (let ((|\x0;temp~1on7G8~370| (cdr |\x0;input~1on7G8~359|))) (if (pair? |\x0;temp~1on7G8~370|) (let ((|\x0;temp~1on7G8~372| (car |\x0;temp~1on7G8~370|))) (let ((|\x0;e1~1on7G8~366| |\x0;temp~1on7G8~372|)) (let ((|\x0;temp~1on7G8~371| (cdr |\x0;temp~1on7G8~370|))) (if (list? |\x0;temp~1on7G8~371|) (let ((|\x0;e2~1on7G8~367| |\x0;temp~1on7G8~371|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~369|) 0 '(core derived)) (cons |\x0;e0~1on7G8~365| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~369|) 0 '(core derived)) (cons |\x0;e1~1on7G8~366| |\x0;e2~1on7G8~367|)) (cons |\x0;rest~1on7G8~356| '()))))) (|\x0;fail~1on7G8~362|))))) (|\x0;fail~1on7G8~362|))))) (|\x0;fail~1on7G8~362|)))))) (if (pair? |\x0;input~1on7G8~359|) (let ((|\x0;temp~1on7G8~383| (car |\x0;input~1on7G8~359|))) (let ((|\x0;e0~1on7G8~374| |\x0;temp~1on7G8~383|)) (let ((|\x0;temp~1on7G8~378| (cdr |\x0;input~1on7G8~359|))) (if (pair? |\x0;temp~1on7G8~378|) (let ((|\x0;temp~1on7G8~382| (car |\x0;temp~1on7G8~378|))) (if (and (ex:identifier? |\x0;temp~1on7G8~382|) (ex:free-identifier=? |\x0;temp~1on7G8~382| (ex:syntax-rename '=> '() '(|\x0;env~1on7G8~377|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~379| (cdr |\x0;temp~1on7G8~378|))) (if (pair? |\x0;temp~1on7G8~379|) (let ((|\x0;temp~1on7G8~381| (car |\x0;temp~1on7G8~379|))) (let ((|\x0;e1~1on7G8~375| |\x0;temp~1on7G8~381|)) (let ((|\x0;temp~1on7G8~380| (cdr |\x0;temp~1on7G8~379|))) (if (null? |\x0;temp~1on7G8~380|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~377|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~377|) 0 '(core derived)) (cons |\x0;e0~1on7G8~374| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~377|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~377|) 0 '(core derived)) (cons (cons |\x0;e1~1on7G8~375| (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~377|) 0 '(core derived)) '())) (cons |\x0;rest~1on7G8~356| '())))) '()))) (|\x0;fail~1on7G8~361|))))) (|\x0;fail~1on7G8~361|))) (|\x0;fail~1on7G8~361|))) (|\x0;fail~1on7G8~361|))))) (|\x0;fail~1on7G8~361|)))))) (if (pair? |\x0;input~1on7G8~359|) (let ((|\x0;temp~1on7G8~388| (car |\x0;input~1on7G8~359|))) (let ((|\x0;e0~1on7G8~384| |\x0;temp~1on7G8~388|)) (let ((|\x0;temp~1on7G8~387| (cdr |\x0;input~1on7G8~359|))) (if (null? |\x0;temp~1on7G8~387|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~386|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~386|) 0 '(core derived)) (cons |\x0;e0~1on7G8~384| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~386|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~386|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~386|) 0 '(core derived)) (cons |\x0;rest~1on7G8~356| '())))) '()))) (|\x0;fail~1on7G8~360|))))) (|\x0;fail~1on7G8~360|))))))))) (|\x0;fail~1on7G8~347|))))) (|\x0;fail~1on7G8~347|)))))) (if (null? |\x0;input~1on7G8~345|) (let ((|\x0;input~1on7G8~392| |\x0;c1~1on7G8~342|)) (let ((|\x0;fail~1on7G8~393| (lambda () (let ((|\x0;fail~1on7G8~394| (lambda () (let ((|\x0;fail~1on7G8~395| (lambda () (let ((|\x0;fail~1on7G8~396| (lambda () (let ((|\x0;fail~1on7G8~397| (lambda () (ex:invalid-form |\x0;input~1on7G8~392|)))) (ex:syntax-violation 'cond "Invalid expression" |\x0;x~1on7G8~322|))))) (if (pair? |\x0;input~1on7G8~392|) (let ((|\x0;temp~1on7G8~407| (car |\x0;input~1on7G8~392|))) (let ((|\x0;e0~1on7G8~399| |\x0;temp~1on7G8~407|)) (let ((|\x0;temp~1on7G8~404| (cdr |\x0;input~1on7G8~392|))) (if (pair? |\x0;temp~1on7G8~404|) (let ((|\x0;temp~1on7G8~406| (car |\x0;temp~1on7G8~404|))) (let ((|\x0;e1~1on7G8~400| |\x0;temp~1on7G8~406|)) (let ((|\x0;temp~1on7G8~405| (cdr |\x0;temp~1on7G8~404|))) (if (list? |\x0;temp~1on7G8~405|) (let ((|\x0;e2~1on7G8~401| |\x0;temp~1on7G8~405|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~403|) 0 '(core derived)) (cons |\x0;e0~1on7G8~399| (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~403|) 0 '(core derived)) (cons |\x0;e1~1on7G8~400| |\x0;e2~1on7G8~401|)) '())))) (|\x0;fail~1on7G8~396|))))) (|\x0;fail~1on7G8~396|))))) (|\x0;fail~1on7G8~396|)))))) (if (pair? |\x0;input~1on7G8~392|) (let ((|\x0;temp~1on7G8~417| (car |\x0;input~1on7G8~392|))) (let ((|\x0;e0~1on7G8~408| |\x0;temp~1on7G8~417|)) (let ((|\x0;temp~1on7G8~412| (cdr |\x0;input~1on7G8~392|))) (if (pair? |\x0;temp~1on7G8~412|) (let ((|\x0;temp~1on7G8~416| (car |\x0;temp~1on7G8~412|))) (if (and (ex:identifier? |\x0;temp~1on7G8~416|) (ex:free-identifier=? |\x0;temp~1on7G8~416| (ex:syntax-rename '=> '() '(|\x0;env~1on7G8~411|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~413| (cdr |\x0;temp~1on7G8~412|))) (if (pair? |\x0;temp~1on7G8~413|) (let ((|\x0;temp~1on7G8~415| (car |\x0;temp~1on7G8~413|))) (let ((|\x0;e1~1on7G8~409| |\x0;temp~1on7G8~415|)) (let ((|\x0;temp~1on7G8~414| (cdr |\x0;temp~1on7G8~413|))) (if (null? |\x0;temp~1on7G8~414|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~411|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~411|) 0 '(core derived)) (cons |\x0;e0~1on7G8~408| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~411|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~411|) 0 '(core derived)) (cons (cons |\x0;e1~1on7G8~409| (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~411|) 0 '(core derived)) '())) '()))) '()))) (|\x0;fail~1on7G8~395|))))) (|\x0;fail~1on7G8~395|))) (|\x0;fail~1on7G8~395|))) (|\x0;fail~1on7G8~395|))))) (|\x0;fail~1on7G8~395|)))))) (if (pair? |\x0;input~1on7G8~392|) (let ((|\x0;temp~1on7G8~422| (car |\x0;input~1on7G8~392|))) (let ((|\x0;e0~1on7G8~418| |\x0;temp~1on7G8~422|)) (let ((|\x0;temp~1on7G8~421| (cdr |\x0;input~1on7G8~392|))) (if (null? |\x0;temp~1on7G8~421|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~420|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~420|) 0 '(core derived)) (cons |\x0;e0~1on7G8~418| '())) '()) (cons (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~420|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~420|) 0 '(core derived)) (cons (ex:syntax-rename 't '() '(|\x0;env~1on7G8~420|) 0 '(core derived)) '()))) '()))) (|\x0;fail~1on7G8~394|))))) (|\x0;fail~1on7G8~394|)))))) (if (pair? |\x0;input~1on7G8~392|) (let ((|\x0;temp~1on7G8~430| (car |\x0;input~1on7G8~392|))) (if (and (ex:identifier? |\x0;temp~1on7G8~430|) (ex:free-identifier=? |\x0;temp~1on7G8~430| (ex:syntax-rename 'else '() '(|\x0;env~1on7G8~426|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~427| (cdr |\x0;input~1on7G8~392|))) (if (pair? |\x0;temp~1on7G8~427|) (let ((|\x0;temp~1on7G8~429| (car |\x0;temp~1on7G8~427|))) (let ((|\x0;e1~1on7G8~423| |\x0;temp~1on7G8~429|)) (let ((|\x0;temp~1on7G8~428| (cdr |\x0;temp~1on7G8~427|))) (if (list? |\x0;temp~1on7G8~428|) (let ((|\x0;e2~1on7G8~424| |\x0;temp~1on7G8~428|)) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~426|) 0 '(core derived)) (cons |\x0;e1~1on7G8~423| |\x0;e2~1on7G8~424|))) (|\x0;fail~1on7G8~393|))))) (|\x0;fail~1on7G8~393|))) (|\x0;fail~1on7G8~393|))) (|\x0;fail~1on7G8~393|)))) (|\x0;fail~1on7G8~346|)))))) ((lambda () ((lambda (|\x0;c1~1on7G8~337| |\x0;c2*~1on7G8~338|) (|\x0;f~1on7G8~333| |\x0;c1~1on7G8~337| |\x0;c2*~1on7G8~338|)) |\x0;c1~1on7G8~326| |\x0;c2~1on7G8~327|)))) ex:undefined)))) (|\x0;fail~1on7G8~325|))))) (|\x0;fail~1on7G8~325|)))) (|\x0;fail~1on7G8~325|)))))) (ex:register-macro! '|\x0;case~1on7G8~435| (lambda (|\x0;x~1on7G8~438|) (let ((|\x0;input~1on7G8~440| |\x0;x~1on7G8~438|)) (let ((|\x0;fail~1on7G8~441| (lambda () (let ((|\x0;fail~1on7G8~442| (lambda () (let ((|\x0;fail~1on7G8~443| (lambda () (let ((|\x0;fail~1on7G8~444| (lambda () (let ((|\x0;fail~1on7G8~445| (lambda () (let ((|\x0;fail~1on7G8~446| (lambda () (let ((|\x0;fail~1on7G8~447| (lambda () (ex:invalid-form |\x0;input~1on7G8~440|)))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~468| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~448| |\x0;temp~1on7G8~468|)) (let ((|\x0;temp~1on7G8~457| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~457|) (let ((|\x0;temp~1on7G8~467| (car |\x0;temp~1on7G8~457|))) (let ((|\x0;key~1on7G8~449| |\x0;temp~1on7G8~467|)) (let ((|\x0;temp~1on7G8~458| (cdr |\x0;temp~1on7G8~457|))) (if (pair? |\x0;temp~1on7G8~458|) (let ((|\x0;temp~1on7G8~462| (car |\x0;temp~1on7G8~458|))) (if (pair? |\x0;temp~1on7G8~462|) (let ((|\x0;temp~1on7G8~466| (car |\x0;temp~1on7G8~462|))) (if (list? |\x0;temp~1on7G8~466|) (let ((|\x0;atoms~1on7G8~450| |\x0;temp~1on7G8~466|)) (let ((|\x0;temp~1on7G8~463| (cdr |\x0;temp~1on7G8~462|))) (if (pair? |\x0;temp~1on7G8~463|) (let ((|\x0;temp~1on7G8~465| (car |\x0;temp~1on7G8~463|))) (let ((|\x0;result1~1on7G8~451| |\x0;temp~1on7G8~465|)) (let ((|\x0;temp~1on7G8~464| (cdr |\x0;temp~1on7G8~463|))) (if (list? |\x0;temp~1on7G8~464|) (let ((|\x0;result2~1on7G8~452| |\x0;temp~1on7G8~464|)) (let ((|\x0;temp~1on7G8~459| (cdr |\x0;temp~1on7G8~458|))) (if (pair? |\x0;temp~1on7G8~459|) (let ((|\x0;temp~1on7G8~461| (car |\x0;temp~1on7G8~459|))) (let ((|\x0;clause~1on7G8~453| |\x0;temp~1on7G8~461|)) (let ((|\x0;temp~1on7G8~460| (cdr |\x0;temp~1on7G8~459|))) (if (list? |\x0;temp~1on7G8~460|) (let ((|\x0;clauses~1on7G8~454| |\x0;temp~1on7G8~460|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~456|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1on7G8~456|) 0 '(core derived)) (cons |\x0;key~1on7G8~449| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~456|) 0 '(core derived)) (cons |\x0;atoms~1on7G8~450| '())) '()))) (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~456|) 0 '(core derived)) (cons |\x0;result1~1on7G8~451| |\x0;result2~1on7G8~452|)) (cons (cons (ex:syntax-rename 'case '() '(|\x0;env~1on7G8~456|) 0 '(core derived)) (cons |\x0;key~1on7G8~449| (cons |\x0;clause~1on7G8~453| |\x0;clauses~1on7G8~454|))) '()))))) (|\x0;fail~1on7G8~447|))))) (|\x0;fail~1on7G8~447|)))) (|\x0;fail~1on7G8~447|))))) (|\x0;fail~1on7G8~447|)))) (|\x0;fail~1on7G8~447|))) (|\x0;fail~1on7G8~447|))) (|\x0;fail~1on7G8~447|))))) (|\x0;fail~1on7G8~447|))))) (|\x0;fail~1on7G8~447|)))))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~485| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~469| |\x0;temp~1on7G8~485|)) (let ((|\x0;temp~1on7G8~476| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~476|) (let ((|\x0;temp~1on7G8~484| (car |\x0;temp~1on7G8~476|))) (let ((|\x0;key~1on7G8~470| |\x0;temp~1on7G8~484|)) (let ((|\x0;temp~1on7G8~477| (cdr |\x0;temp~1on7G8~476|))) (if (pair? |\x0;temp~1on7G8~477|) (let ((|\x0;temp~1on7G8~479| (car |\x0;temp~1on7G8~477|))) (if (pair? |\x0;temp~1on7G8~479|) (let ((|\x0;temp~1on7G8~483| (car |\x0;temp~1on7G8~479|))) (if (list? |\x0;temp~1on7G8~483|) (let ((|\x0;atoms~1on7G8~471| |\x0;temp~1on7G8~483|)) (let ((|\x0;temp~1on7G8~480| (cdr |\x0;temp~1on7G8~479|))) (if (pair? |\x0;temp~1on7G8~480|) (let ((|\x0;temp~1on7G8~482| (car |\x0;temp~1on7G8~480|))) (let ((|\x0;result1~1on7G8~472| |\x0;temp~1on7G8~482|)) (let ((|\x0;temp~1on7G8~481| (cdr |\x0;temp~1on7G8~480|))) (if (list? |\x0;temp~1on7G8~481|) (let ((|\x0;result2~1on7G8~473| |\x0;temp~1on7G8~481|)) (let ((|\x0;temp~1on7G8~478| (cdr |\x0;temp~1on7G8~477|))) (if (null? |\x0;temp~1on7G8~478|) (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~475|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1on7G8~475|) 0 '(core derived)) (cons |\x0;key~1on7G8~470| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~475|) 0 '(core derived)) (cons |\x0;atoms~1on7G8~471| '())) '()))) (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~475|) 0 '(core derived)) (cons |\x0;result1~1on7G8~472| |\x0;result2~1on7G8~473|)) '()))) (|\x0;fail~1on7G8~446|)))) (|\x0;fail~1on7G8~446|))))) (|\x0;fail~1on7G8~446|)))) (|\x0;fail~1on7G8~446|))) (|\x0;fail~1on7G8~446|))) (|\x0;fail~1on7G8~446|))))) (|\x0;fail~1on7G8~446|))))) (|\x0;fail~1on7G8~446|)))))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~507| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~486| |\x0;temp~1on7G8~507|)) (let ((|\x0;temp~1on7G8~494| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~494|) (let ((|\x0;temp~1on7G8~506| (car |\x0;temp~1on7G8~494|))) (let ((|\x0;key~1on7G8~487| |\x0;temp~1on7G8~506|)) (let ((|\x0;temp~1on7G8~495| (cdr |\x0;temp~1on7G8~494|))) (if (pair? |\x0;temp~1on7G8~495|) (let ((|\x0;temp~1on7G8~499| (car |\x0;temp~1on7G8~495|))) (if (pair? |\x0;temp~1on7G8~499|) (let ((|\x0;temp~1on7G8~505| (car |\x0;temp~1on7G8~499|))) (if (list? |\x0;temp~1on7G8~505|) (let ((|\x0;atoms~1on7G8~488| |\x0;temp~1on7G8~505|)) (let ((|\x0;temp~1on7G8~500| (cdr |\x0;temp~1on7G8~499|))) (if (pair? |\x0;temp~1on7G8~500|) (let ((|\x0;temp~1on7G8~504| (car |\x0;temp~1on7G8~500|))) (if (and (ex:identifier? |\x0;temp~1on7G8~504|) (ex:free-identifier=? |\x0;temp~1on7G8~504| (ex:syntax-rename '=> '() '(|\x0;env~1on7G8~493|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~501| (cdr |\x0;temp~1on7G8~500|))) (if (pair? |\x0;temp~1on7G8~501|) (let ((|\x0;temp~1on7G8~503| (car |\x0;temp~1on7G8~501|))) (let ((|\x0;result~1on7G8~489| |\x0;temp~1on7G8~503|)) (let ((|\x0;temp~1on7G8~502| (cdr |\x0;temp~1on7G8~501|))) (if (null? |\x0;temp~1on7G8~502|) (let ((|\x0;temp~1on7G8~496| (cdr |\x0;temp~1on7G8~495|))) (if (pair? |\x0;temp~1on7G8~496|) (let ((|\x0;temp~1on7G8~498| (car |\x0;temp~1on7G8~496|))) (let ((|\x0;clause~1on7G8~490| |\x0;temp~1on7G8~498|)) (let ((|\x0;temp~1on7G8~497| (cdr |\x0;temp~1on7G8~496|))) (if (list? |\x0;temp~1on7G8~497|) (let ((|\x0;clauses~1on7G8~491| |\x0;temp~1on7G8~497|)) (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~493|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1on7G8~493|) 0 '(core derived)) (cons |\x0;key~1on7G8~487| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~493|) 0 '(core derived)) (cons |\x0;atoms~1on7G8~488| '())) '()))) (cons (cons |\x0;result~1on7G8~489| (cons |\x0;key~1on7G8~487| '())) (cons (cons (ex:syntax-rename 'case '() '(|\x0;env~1on7G8~493|) 0 '(core derived)) (cons |\x0;key~1on7G8~487| (cons |\x0;clause~1on7G8~490| |\x0;clauses~1on7G8~491|))) '()))))) (|\x0;fail~1on7G8~445|))))) (|\x0;fail~1on7G8~445|))) (|\x0;fail~1on7G8~445|))))) (|\x0;fail~1on7G8~445|))) (|\x0;fail~1on7G8~445|))) (|\x0;fail~1on7G8~445|)))) (|\x0;fail~1on7G8~445|))) (|\x0;fail~1on7G8~445|))) (|\x0;fail~1on7G8~445|))))) (|\x0;fail~1on7G8~445|))))) (|\x0;fail~1on7G8~445|)))))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~525| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~508| |\x0;temp~1on7G8~525|)) (let ((|\x0;temp~1on7G8~514| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~514|) (let ((|\x0;temp~1on7G8~524| (car |\x0;temp~1on7G8~514|))) (let ((|\x0;key~1on7G8~509| |\x0;temp~1on7G8~524|)) (let ((|\x0;temp~1on7G8~515| (cdr |\x0;temp~1on7G8~514|))) (if (pair? |\x0;temp~1on7G8~515|) (let ((|\x0;temp~1on7G8~517| (car |\x0;temp~1on7G8~515|))) (if (pair? |\x0;temp~1on7G8~517|) (let ((|\x0;temp~1on7G8~523| (car |\x0;temp~1on7G8~517|))) (if (list? |\x0;temp~1on7G8~523|) (let ((|\x0;atoms~1on7G8~510| |\x0;temp~1on7G8~523|)) (let ((|\x0;temp~1on7G8~518| (cdr |\x0;temp~1on7G8~517|))) (if (pair? |\x0;temp~1on7G8~518|) (let ((|\x0;temp~1on7G8~522| (car |\x0;temp~1on7G8~518|))) (if (and (ex:identifier? |\x0;temp~1on7G8~522|) (ex:free-identifier=? |\x0;temp~1on7G8~522| (ex:syntax-rename '=> '() '(|\x0;env~1on7G8~513|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~519| (cdr |\x0;temp~1on7G8~518|))) (if (pair? |\x0;temp~1on7G8~519|) (let ((|\x0;temp~1on7G8~521| (car |\x0;temp~1on7G8~519|))) (let ((|\x0;result~1on7G8~511| |\x0;temp~1on7G8~521|)) (let ((|\x0;temp~1on7G8~520| (cdr |\x0;temp~1on7G8~519|))) (if (null? |\x0;temp~1on7G8~520|) (let ((|\x0;temp~1on7G8~516| (cdr |\x0;temp~1on7G8~515|))) (if (null? |\x0;temp~1on7G8~516|) (cons (ex:syntax-rename 'if '() '(|\x0;env~1on7G8~513|) 0 '(core derived)) (cons (cons (ex:syntax-rename 'memv '() '(|\x0;env~1on7G8~513|) 0 '(core derived)) (cons |\x0;key~1on7G8~509| (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~513|) 0 '(core derived)) (cons |\x0;atoms~1on7G8~510| '())) '()))) (cons (cons |\x0;result~1on7G8~511| (cons |\x0;key~1on7G8~509| '())) '()))) (|\x0;fail~1on7G8~444|))) (|\x0;fail~1on7G8~444|))))) (|\x0;fail~1on7G8~444|))) (|\x0;fail~1on7G8~444|))) (|\x0;fail~1on7G8~444|)))) (|\x0;fail~1on7G8~444|))) (|\x0;fail~1on7G8~444|))) (|\x0;fail~1on7G8~444|))))) (|\x0;fail~1on7G8~444|))))) (|\x0;fail~1on7G8~444|)))))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~541| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~526| |\x0;temp~1on7G8~541|)) (let ((|\x0;temp~1on7G8~532| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~532|) (let ((|\x0;temp~1on7G8~540| (car |\x0;temp~1on7G8~532|))) (let ((|\x0;key~1on7G8~527| |\x0;temp~1on7G8~540|)) (let ((|\x0;temp~1on7G8~533| (cdr |\x0;temp~1on7G8~532|))) (if (pair? |\x0;temp~1on7G8~533|) (let ((|\x0;temp~1on7G8~535| (car |\x0;temp~1on7G8~533|))) (if (pair? |\x0;temp~1on7G8~535|) (let ((|\x0;temp~1on7G8~539| (car |\x0;temp~1on7G8~535|))) (if (and (ex:identifier? |\x0;temp~1on7G8~539|) (ex:free-identifier=? |\x0;temp~1on7G8~539| (ex:syntax-rename 'else '() '(|\x0;env~1on7G8~531|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~536| (cdr |\x0;temp~1on7G8~535|))) (if (pair? |\x0;temp~1on7G8~536|) (let ((|\x0;temp~1on7G8~538| (car |\x0;temp~1on7G8~536|))) (let ((|\x0;result1~1on7G8~528| |\x0;temp~1on7G8~538|)) (let ((|\x0;temp~1on7G8~537| (cdr |\x0;temp~1on7G8~536|))) (if (list? |\x0;temp~1on7G8~537|) (let ((|\x0;result2~1on7G8~529| |\x0;temp~1on7G8~537|)) (let ((|\x0;temp~1on7G8~534| (cdr |\x0;temp~1on7G8~533|))) (if (null? |\x0;temp~1on7G8~534|) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~531|) 0 '(core derived)) (cons |\x0;result1~1on7G8~528| |\x0;result2~1on7G8~529|)) (|\x0;fail~1on7G8~443|)))) (|\x0;fail~1on7G8~443|))))) (|\x0;fail~1on7G8~443|))) (|\x0;fail~1on7G8~443|))) (|\x0;fail~1on7G8~443|))) (|\x0;fail~1on7G8~443|))))) (|\x0;fail~1on7G8~443|))))) (|\x0;fail~1on7G8~443|)))))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~558| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~542| |\x0;temp~1on7G8~558|)) (let ((|\x0;temp~1on7G8~546| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~546|) (let ((|\x0;temp~1on7G8~557| (car |\x0;temp~1on7G8~546|))) (let ((|\x0;key~1on7G8~543| |\x0;temp~1on7G8~557|)) (let ((|\x0;temp~1on7G8~547| (cdr |\x0;temp~1on7G8~546|))) (if (pair? |\x0;temp~1on7G8~547|) (let ((|\x0;temp~1on7G8~549| (car |\x0;temp~1on7G8~547|))) (if (pair? |\x0;temp~1on7G8~549|) (let ((|\x0;temp~1on7G8~556| (car |\x0;temp~1on7G8~549|))) (if (and (ex:identifier? |\x0;temp~1on7G8~556|) (ex:free-identifier=? |\x0;temp~1on7G8~556| (ex:syntax-rename 'else '() '(|\x0;env~1on7G8~555|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~550| (cdr |\x0;temp~1on7G8~549|))) (if (pair? |\x0;temp~1on7G8~550|) (let ((|\x0;temp~1on7G8~554| (car |\x0;temp~1on7G8~550|))) (if (and (ex:identifier? |\x0;temp~1on7G8~554|) (ex:free-identifier=? |\x0;temp~1on7G8~554| (ex:syntax-rename '=> '() '(|\x0;env~1on7G8~555|) 0 '(core derived)))) (let ((|\x0;temp~1on7G8~551| (cdr |\x0;temp~1on7G8~550|))) (if (pair? |\x0;temp~1on7G8~551|) (let ((|\x0;temp~1on7G8~553| (car |\x0;temp~1on7G8~551|))) (let ((|\x0;result~1on7G8~544| |\x0;temp~1on7G8~553|)) (let ((|\x0;temp~1on7G8~552| (cdr |\x0;temp~1on7G8~551|))) (if (null? |\x0;temp~1on7G8~552|) (let ((|\x0;temp~1on7G8~548| (cdr |\x0;temp~1on7G8~547|))) (if (null? |\x0;temp~1on7G8~548|) (cons |\x0;result~1on7G8~544| (cons |\x0;key~1on7G8~543| '())) (|\x0;fail~1on7G8~442|))) (|\x0;fail~1on7G8~442|))))) (|\x0;fail~1on7G8~442|))) (|\x0;fail~1on7G8~442|))) (|\x0;fail~1on7G8~442|))) (|\x0;fail~1on7G8~442|))) (|\x0;fail~1on7G8~442|))) (|\x0;fail~1on7G8~442|))))) (|\x0;fail~1on7G8~442|))))) (|\x0;fail~1on7G8~442|)))))) (if (pair? |\x0;input~1on7G8~440|) (let ((|\x0;temp~1on7G8~567| (car |\x0;input~1on7G8~440|))) (let ((|\x0;dummy~1on7G8~559| |\x0;temp~1on7G8~567|)) (let ((|\x0;temp~1on7G8~564| (cdr |\x0;input~1on7G8~440|))) (if (pair? |\x0;temp~1on7G8~564|) (let ((|\x0;temp~1on7G8~566| (car |\x0;temp~1on7G8~564|))) (if (list? |\x0;temp~1on7G8~566|) (let ((|\x0;key~1on7G8~560| |\x0;temp~1on7G8~566|)) (let ((|\x0;temp~1on7G8~565| (cdr |\x0;temp~1on7G8~564|))) (if (list? |\x0;temp~1on7G8~565|) (let ((|\x0;clauses~1on7G8~561| |\x0;temp~1on7G8~565|)) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~563|) 0 '(core derived)) (cons (cons (cons (ex:syntax-rename 'atom-key '() '(|\x0;env~1on7G8~563|) 0 '(core derived)) (cons |\x0;key~1on7G8~560| '())) '()) (cons (cons (ex:syntax-rename 'case '() '(|\x0;env~1on7G8~563|) 0 '(core derived)) (cons (ex:syntax-rename 'atom-key '() '(|\x0;env~1on7G8~563|) 0 '(core derived)) |\x0;clauses~1on7G8~561|)) '())))) (|\x0;fail~1on7G8~441|)))) (|\x0;fail~1on7G8~441|))) (|\x0;fail~1on7G8~441|))))) (|\x0;fail~1on7G8~441|)))))) (ex:register-macro! '|\x0;=>~1on7G8~568| (lambda (|\x0;x~1on7G8~570|) (ex:syntax-violation '=> "Invalid expression" |\x0;x~1on7G8~570|))) (ex:register-macro! '|\x0;else~1on7G8~572| (lambda (|\x0;x~1on7G8~574|) (ex:syntax-violation 'else "Invalid expression" |\x0;x~1on7G8~574|))) (values)) (lambda () (values)) '|\x0;build~1on7G8~576|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core identifier-syntax) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~617| 0 1 2 3) (|\x0;env~1on7G8~594| 4 1 2 3)) (4 (((id) . #f) ((exp1) . #f) ((var) . #f) ((val) . #f) ((exp2) . #f))) (3 (((identifier-syntax) macro |\x0;identifier-syntax~1on7G8~577| (0) #f (core identifier-syntax)) ((undefined) variable ex:undefined (1 0 -1) #f ()) ((eval) variable ex:eval (1 0 -1) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0 -1) #f ()) ((environment) variable ex:environment (1 0 -1) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0 -1) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0 -1) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0 -1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0 -1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0 -1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0 -1) #f ()) ((identifier?) variable ex:identifier? (1 0 -1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0 -1) #f ()) ((syntax-case) macro syntax-case (1 0 -1) #f ()) ((syntax) macro syntax (1 0 -1) #f ()) ((...) macro ... (1 0 -1) #f ()) ((_) macro _ (1 0 -1) #f ()) ((letrec-syntax) macro letrec-syntax (1 0 -1) #f ()) ((let-syntax) macro let-syntax (1 0 -1) #f ()) ((define-syntax) macro define-syntax (1 0 -1) #f ()) ((define) macro define (1 0 -1) #f ()) ((or) macro or (1 0 -1) #f ()) ((and) macro and (1 0 -1) #f ()) ((set!) macro set! (1 0 -1) #f ()) ((quote) macro quote (1 0 -1) #f ()) ((lambda) macro lambda (1 0 -1) #f ()) ((if) macro if (1 0 -1) #f ()) ((begin) macro begin (1 0 -1) #f ()))) (2 (((x) variable |\x0;x~1on7G8~579| (1) #f (core identifier-syntax)))) (1 ()) (0 (((e) . #f)))))) '((identifier-syntax macro |\x0;identifier-syntax~1on7G8~577| (0) #f (core identifier-syntax))) '(((core primitives) 1 0 -1)) '(|\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;identifier-syntax~1on7G8~577| (lambda (|\x0;x~1on7G8~579|) (let ((|\x0;input~1on7G8~581| |\x0;x~1on7G8~579|)) (let ((|\x0;fail~1on7G8~582| (lambda () (let ((|\x0;fail~1on7G8~583| (lambda () (ex:invalid-form |\x0;input~1on7G8~581|)))) (if (pair? |\x0;input~1on7G8~581|) (let ((|\x0;temp~1on7G8~614| (car |\x0;input~1on7G8~581|))) (let ((|\x0;temp~1on7G8~595| (cdr |\x0;input~1on7G8~581|))) (if (pair? |\x0;temp~1on7G8~595|) (let ((|\x0;temp~1on7G8~609| (car |\x0;temp~1on7G8~595|))) (if (pair? |\x0;temp~1on7G8~609|) (let ((|\x0;temp~1on7G8~613| (car |\x0;temp~1on7G8~609|))) (let ((|\x0;id~1on7G8~584| |\x0;temp~1on7G8~613|)) (let ((|\x0;temp~1on7G8~610| (cdr |\x0;temp~1on7G8~609|))) (if (pair? |\x0;temp~1on7G8~610|) (let ((|\x0;temp~1on7G8~612| (car |\x0;temp~1on7G8~610|))) (let ((|\x0;exp1~1on7G8~585| |\x0;temp~1on7G8~612|)) (let ((|\x0;temp~1on7G8~611| (cdr |\x0;temp~1on7G8~610|))) (if (null? |\x0;temp~1on7G8~611|) (let ((|\x0;temp~1on7G8~596| (cdr |\x0;temp~1on7G8~595|))) (if (pair? |\x0;temp~1on7G8~596|) (let ((|\x0;temp~1on7G8~598| (car |\x0;temp~1on7G8~596|))) (if (pair? |\x0;temp~1on7G8~598|) (let ((|\x0;temp~1on7G8~602| (car |\x0;temp~1on7G8~598|))) (if (pair? |\x0;temp~1on7G8~602|) (let ((|\x0;temp~1on7G8~608| (car |\x0;temp~1on7G8~602|))) (if (and (ex:identifier? |\x0;temp~1on7G8~608|) (ex:free-identifier=? |\x0;temp~1on7G8~608| (ex:syntax-rename 'set! '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)))) (let ((|\x0;temp~1on7G8~603| (cdr |\x0;temp~1on7G8~602|))) (if (pair? |\x0;temp~1on7G8~603|) (let ((|\x0;temp~1on7G8~607| (car |\x0;temp~1on7G8~603|))) (let ((|\x0;var~1on7G8~586| |\x0;temp~1on7G8~607|)) (let ((|\x0;temp~1on7G8~604| (cdr |\x0;temp~1on7G8~603|))) (if (pair? |\x0;temp~1on7G8~604|) (let ((|\x0;temp~1on7G8~606| (car |\x0;temp~1on7G8~604|))) (let ((|\x0;val~1on7G8~587| |\x0;temp~1on7G8~606|)) (let ((|\x0;temp~1on7G8~605| (cdr |\x0;temp~1on7G8~604|))) (if (null? |\x0;temp~1on7G8~605|) (let ((|\x0;temp~1on7G8~599| (cdr |\x0;temp~1on7G8~598|))) (if (pair? |\x0;temp~1on7G8~599|) (let ((|\x0;temp~1on7G8~601| (car |\x0;temp~1on7G8~599|))) (let ((|\x0;exp2~1on7G8~588| |\x0;temp~1on7G8~601|)) (let ((|\x0;temp~1on7G8~600| (cdr |\x0;temp~1on7G8~599|))) (if (null? |\x0;temp~1on7G8~600|) (let ((|\x0;temp~1on7G8~597| (cdr |\x0;temp~1on7G8~596|))) (if (null? |\x0;temp~1on7G8~597|) (if (if (ex:identifier? |\x0;id~1on7G8~584|) (ex:identifier? |\x0;var~1on7G8~586|) #f) (cons (ex:syntax-rename 'make-variable-transformer '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'set! '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) '()) (cons (cons (cons (ex:syntax-rename 'set! '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons |\x0;var~1on7G8~586| (cons |\x0;val~1on7G8~587| '()))) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons |\x0;exp2~1on7G8~588| '())) '())) (cons (cons (cons |\x0;id~1on7G8~584| (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) '()))) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (cons |\x0;exp1~1on7G8~585| (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) '()))) '())) '())) (cons (cons |\x0;id~1on7G8~584| (cons (cons (ex:syntax-rename 'identifier? '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons |\x0;id~1on7G8~584| '())) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~594|) 0 '(core identifier-syntax)) (cons |\x0;exp1~1on7G8~585| '())) '()))) '())))))) '()))) '())) (|\x0;fail~1on7G8~583|)) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))))) (|\x0;fail~1on7G8~583|))))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|))))) (|\x0;fail~1on7G8~583|))))) (|\x0;fail~1on7G8~583|))) (|\x0;fail~1on7G8~583|)))) (|\x0;fail~1on7G8~583|)))))) (if (pair? |\x0;input~1on7G8~581|) (let ((|\x0;temp~1on7G8~621| (car |\x0;input~1on7G8~581|))) (let ((|\x0;temp~1on7G8~618| (cdr |\x0;input~1on7G8~581|))) (if (pair? |\x0;temp~1on7G8~618|) (let ((|\x0;temp~1on7G8~620| (car |\x0;temp~1on7G8~618|))) (let ((|\x0;e~1on7G8~615| |\x0;temp~1on7G8~620|)) (let ((|\x0;temp~1on7G8~619| (cdr |\x0;temp~1on7G8~618|))) (if (null? |\x0;temp~1on7G8~619|) (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) '()) (cons (cons (ex:syntax-rename 'syntax-case '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons '() (cons (cons (ex:syntax-rename 'id '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'identifier? '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'id '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) '())) '())) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons |\x0;e~1on7G8~615| '())) '()))) (cons (cons (cons (ex:syntax-rename '_ '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) '()))) (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (cons |\x0;e~1on7G8~615| (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) (cons (ex:syntax-rename '... '() '(|\x0;env~1on7G8~617|) 0 '(core identifier-syntax)) '()))) '())) '())) '()))))) '()))) (|\x0;fail~1on7G8~582|))))) (|\x0;fail~1on7G8~582|)))) (|\x0;fail~1on7G8~582|)))))) (values)) (lambda () (values)) '|\x0;build~1on7G8~622|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core quasisyntax) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~840| 0 1 2 3 4 5) (|\x0;env~1on7G8~812| 6 1 2 3 4 5) (|\x0;env~1on7G8~796| 7 1 2 3 4 5) (|\x0;env~1on7G8~770| 8 1 2 3 4 5) (|\x0;env~1on7G8~751| 9 8 1 2 3 4 5) (|\x0;env~1on7G8~716| 10 1 2 3 4 5) (|\x0;env~1on7G8~640| 11 12 3 4 5)) (12 (((template) . #f))) (11 (((template*) . #f) ((replacements) . #f))) (10 (((k) . #f) ((r) . #f))) (9 (((r*) . #f) ((rep) . #f) ((t) . #f))) (8 (((e) . #f) ((r) . #f))) (7 (((e) . #f) ((r) . #f))) (6 (((e) . #f))) (5 (((unsyntax-splicing) macro |\x0;unsyntax-splicing~1on7G8~845| (0) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1on7G8~841| (0) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1on7G8~623| (0) #f (core quasisyntax)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro |\x0;letrec*~1on7G8~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1on7G8~192| (0 1) #f (core let)) ((let) macro |\x0;let~1on7G8~144| (0 1) #f (core let)) ((=>) macro |\x0;=>~1on7G8~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1on7G8~572| (0 1) #f (core derived)) ((case) macro |\x0;case~1on7G8~435| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1on7G8~320| (0 1) #f (core derived)) ((let*) macro |\x0;let*~1on7G8~241| (0 1) #f (core derived)) ((with-syntax) macro |\x0;with-syntax~1on7G8~3| (0 1) #f (core with-syntax)) ((vector->list) variable vector->list (0 1) #f ()) ((-) variable - (0 1) #f ()) ((+) variable + (0 1) #f ()) ((>) variable > (0 1) #f ()) ((=) variable = (0 1) #f ()))) (4 (((e) variable |\x0;e~1on7G8~625| (1) #f (core quasisyntax)))) (3 (((expand) variable |\x0;expand~1on7G8~626| (1) #f (core quasisyntax)))) (2 (((x) variable |\x0;x~1on7G8~650| (1) #f (core quasisyntax)) ((level) variable |\x0;level~1on7G8~651| (1) #f (core quasisyntax)))) (1 ()) (0 (((e) . #f)))))) '((quasisyntax macro |\x0;quasisyntax~1on7G8~623| (0) #f (core quasisyntax)) (unsyntax macro |\x0;unsyntax~1on7G8~841| (0) #f (core quasisyntax)) (unsyntax-splicing macro |\x0;unsyntax-splicing~1on7G8~845| (0) #f (core quasisyntax))) '(((core with-syntax) 0 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1)) '(|\x0;build~1on7G8~57| |\x0;build~1on7G8~576| |\x0;build~1on7G8~240| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;quasisyntax~1on7G8~623| (lambda (|\x0;e~1on7G8~625|) ((lambda (|\x0;expand~1on7G8~626|) (set! |\x0;expand~1on7G8~626| (lambda (|\x0;x~1on7G8~650| |\x0;level~1on7G8~651|) (let ((|\x0;input~1on7G8~653| |\x0;x~1on7G8~650|)) (let ((|\x0;fail~1on7G8~654| (lambda () (let ((|\x0;fail~1on7G8~655| (lambda () (let ((|\x0;fail~1on7G8~656| (lambda () (let ((|\x0;fail~1on7G8~657| (lambda () (let ((|\x0;fail~1on7G8~658| (lambda () (let ((|\x0;fail~1on7G8~659| (lambda () (let ((|\x0;fail~1on7G8~660| (lambda () (let ((|\x0;fail~1on7G8~661| (lambda () (ex:invalid-form |\x0;input~1on7G8~653|)))) (let ((|\x0;other~1on7G8~662| |\x0;input~1on7G8~653|)) (cons |\x0;other~1on7G8~662| (cons '() '()))))))) (if (vector? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~678| (vector->list |\x0;input~1on7G8~653|))) (if (list? |\x0;temp~1on7G8~678|) (let ((|\x0;e~1on7G8~664| |\x0;temp~1on7G8~678|)) (let ((|\x0;input~1on7G8~667| (|\x0;expand~1on7G8~626| (vector->list (list->vector |\x0;e~1on7G8~664|)) |\x0;level~1on7G8~651|))) (let ((|\x0;fail~1on7G8~669| (lambda () (ex:invalid-form |\x0;input~1on7G8~667|)))) (if (pair? |\x0;input~1on7G8~667|) (let ((|\x0;temp~1on7G8~677| (car |\x0;input~1on7G8~667|))) (if (list? |\x0;temp~1on7G8~677|) (let ((|\x0;e*~1on7G8~670| |\x0;temp~1on7G8~677|)) (let ((|\x0;temp~1on7G8~674| (cdr |\x0;input~1on7G8~667|))) (if (pair? |\x0;temp~1on7G8~674|) (let ((|\x0;temp~1on7G8~676| (car |\x0;temp~1on7G8~674|))) (let ((|\x0;reps~1on7G8~671| |\x0;temp~1on7G8~676|)) (let ((|\x0;temp~1on7G8~675| (cdr |\x0;temp~1on7G8~674|))) (if (null? |\x0;temp~1on7G8~675|) (begin (cons (list->vector |\x0;e*~1on7G8~670|) (cons |\x0;reps~1on7G8~671| '()))) (|\x0;fail~1on7G8~669|))))) (|\x0;fail~1on7G8~669|)))) (|\x0;fail~1on7G8~669|))) (|\x0;fail~1on7G8~669|))))) (|\x0;fail~1on7G8~660|))) (|\x0;fail~1on7G8~660|)))))) (if (pair? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~706| (car |\x0;input~1on7G8~653|))) (let ((|\x0;h~1on7G8~679| |\x0;temp~1on7G8~706|)) (let ((|\x0;temp~1on7G8~705| (cdr |\x0;input~1on7G8~653|))) (let ((|\x0;t~1on7G8~680| |\x0;temp~1on7G8~705|)) (let ((|\x0;input~1on7G8~683| (list (|\x0;expand~1on7G8~626| |\x0;h~1on7G8~679| |\x0;level~1on7G8~651|) (|\x0;expand~1on7G8~626| |\x0;t~1on7G8~680| |\x0;level~1on7G8~651|)))) (let ((|\x0;fail~1on7G8~686| (lambda () (ex:invalid-form |\x0;input~1on7G8~683|)))) (if (pair? |\x0;input~1on7G8~683|) (let ((|\x0;temp~1on7G8~700| (car |\x0;input~1on7G8~683|))) (if (pair? |\x0;temp~1on7G8~700|) (let ((|\x0;temp~1on7G8~704| (car |\x0;temp~1on7G8~700|))) (let ((|\x0;h*~1on7G8~687| |\x0;temp~1on7G8~704|)) (let ((|\x0;temp~1on7G8~701| (cdr |\x0;temp~1on7G8~700|))) (if (pair? |\x0;temp~1on7G8~701|) (let ((|\x0;temp~1on7G8~703| (car |\x0;temp~1on7G8~701|))) (if (list? |\x0;temp~1on7G8~703|) (let ((|\x0;rep1~1on7G8~688| |\x0;temp~1on7G8~703|)) (let ((|\x0;temp~1on7G8~702| (cdr |\x0;temp~1on7G8~701|))) (if (null? |\x0;temp~1on7G8~702|) (let ((|\x0;temp~1on7G8~693| (cdr |\x0;input~1on7G8~683|))) (if (pair? |\x0;temp~1on7G8~693|) (let ((|\x0;temp~1on7G8~695| (car |\x0;temp~1on7G8~693|))) (if (pair? |\x0;temp~1on7G8~695|) (let ((|\x0;temp~1on7G8~699| (car |\x0;temp~1on7G8~695|))) (let ((|\x0;t*~1on7G8~689| |\x0;temp~1on7G8~699|)) (let ((|\x0;temp~1on7G8~696| (cdr |\x0;temp~1on7G8~695|))) (if (pair? |\x0;temp~1on7G8~696|) (let ((|\x0;temp~1on7G8~698| (car |\x0;temp~1on7G8~696|))) (if (list? |\x0;temp~1on7G8~698|) (let ((|\x0;rep2~1on7G8~690| |\x0;temp~1on7G8~698|)) (let ((|\x0;temp~1on7G8~697| (cdr |\x0;temp~1on7G8~696|))) (if (null? |\x0;temp~1on7G8~697|) (let ((|\x0;temp~1on7G8~694| (cdr |\x0;temp~1on7G8~693|))) (if (null? |\x0;temp~1on7G8~694|) (begin (cons (cons |\x0;h*~1on7G8~687| |\x0;t*~1on7G8~689|) (cons (append |\x0;rep1~1on7G8~688| |\x0;rep2~1on7G8~690|) '()))) (|\x0;fail~1on7G8~686|))) (|\x0;fail~1on7G8~686|)))) (|\x0;fail~1on7G8~686|))) (|\x0;fail~1on7G8~686|))))) (|\x0;fail~1on7G8~686|))) (|\x0;fail~1on7G8~686|))) (|\x0;fail~1on7G8~686|)))) (|\x0;fail~1on7G8~686|))) (|\x0;fail~1on7G8~686|))))) (|\x0;fail~1on7G8~686|))) (|\x0;fail~1on7G8~686|)))))))) (|\x0;fail~1on7G8~659|)))))) (if (pair? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~734| (car |\x0;input~1on7G8~653|))) (let ((|\x0;k~1on7G8~707| |\x0;temp~1on7G8~734|)) (let ((|\x0;temp~1on7G8~733| (cdr |\x0;input~1on7G8~653|))) (let ((|\x0;r~1on7G8~708| |\x0;temp~1on7G8~733|)) (if (if (> |\x0;level~1on7G8~651| 0) (if (ex:identifier? |\x0;k~1on7G8~707|) (let ((x (ex:free-identifier=? |\x0;k~1on7G8~707| (ex:syntax-rename 'unsyntax '() '(|\x0;env~1on7G8~716|) 0 '(core quasisyntax))))) (if x x (ex:free-identifier=? |\x0;k~1on7G8~707| (ex:syntax-rename 'unsyntax-splicing '() '(|\x0;env~1on7G8~716|) 0 '(core quasisyntax))))) #f) #f) (let ((|\x0;input~1on7G8~722| (|\x0;expand~1on7G8~626| |\x0;r~1on7G8~708| (- |\x0;level~1on7G8~651| 1)))) (let ((|\x0;fail~1on7G8~724| (lambda () (ex:invalid-form |\x0;input~1on7G8~722|)))) (if (pair? |\x0;input~1on7G8~722|) (let ((|\x0;temp~1on7G8~732| (car |\x0;input~1on7G8~722|))) (let ((|\x0;r*~1on7G8~725| |\x0;temp~1on7G8~732|)) (let ((|\x0;temp~1on7G8~729| (cdr |\x0;input~1on7G8~722|))) (if (pair? |\x0;temp~1on7G8~729|) (let ((|\x0;temp~1on7G8~731| (car |\x0;temp~1on7G8~729|))) (let ((|\x0;reps~1on7G8~726| |\x0;temp~1on7G8~731|)) (let ((|\x0;temp~1on7G8~730| (cdr |\x0;temp~1on7G8~729|))) (if (null? |\x0;temp~1on7G8~730|) (begin (cons (cons |\x0;k~1on7G8~707| |\x0;r*~1on7G8~725|) (cons |\x0;reps~1on7G8~726| '()))) (|\x0;fail~1on7G8~724|))))) (|\x0;fail~1on7G8~724|))))) (|\x0;fail~1on7G8~724|)))) (|\x0;fail~1on7G8~658|)))))) (|\x0;fail~1on7G8~658|)))))) (if (pair? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~767| (car |\x0;input~1on7G8~653|))) (if (pair? |\x0;temp~1on7G8~767|) (let ((|\x0;temp~1on7G8~769| (car |\x0;temp~1on7G8~767|))) (if (and (ex:identifier? |\x0;temp~1on7G8~769|) (ex:free-identifier=? |\x0;temp~1on7G8~769| (ex:syntax-rename 'unsyntax-splicing '() '(|\x0;env~1on7G8~770|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1on7G8~768| (cdr |\x0;temp~1on7G8~767|))) (if (list? |\x0;temp~1on7G8~768|) (let ((|\x0;e~1on7G8~735| |\x0;temp~1on7G8~768|)) (let ((|\x0;temp~1on7G8~766| (cdr |\x0;input~1on7G8~653|))) (let ((|\x0;r~1on7G8~736| |\x0;temp~1on7G8~766|)) (if (= |\x0;level~1on7G8~651| 0) (let ((|\x0;input~1on7G8~739| (list (|\x0;expand~1on7G8~626| |\x0;r~1on7G8~736| 0) (ex:generate-temporaries |\x0;e~1on7G8~735|)))) (let ((|\x0;fail~1on7G8~742| (lambda () (ex:invalid-form |\x0;input~1on7G8~739|)))) (if (pair? |\x0;input~1on7G8~739|) (let ((|\x0;temp~1on7G8~761| (car |\x0;input~1on7G8~739|))) (if (pair? |\x0;temp~1on7G8~761|) (let ((|\x0;temp~1on7G8~765| (car |\x0;temp~1on7G8~761|))) (let ((|\x0;r*~1on7G8~743| |\x0;temp~1on7G8~765|)) (let ((|\x0;temp~1on7G8~762| (cdr |\x0;temp~1on7G8~761|))) (if (pair? |\x0;temp~1on7G8~762|) (let ((|\x0;temp~1on7G8~764| (car |\x0;temp~1on7G8~762|))) (if (list? |\x0;temp~1on7G8~764|) (let ((|\x0;rep~1on7G8~744| |\x0;temp~1on7G8~764|)) (let ((|\x0;temp~1on7G8~763| (cdr |\x0;temp~1on7G8~762|))) (if (null? |\x0;temp~1on7G8~763|) (let ((|\x0;temp~1on7G8~758| (cdr |\x0;input~1on7G8~739|))) (if (pair? |\x0;temp~1on7G8~758|) (let ((|\x0;temp~1on7G8~760| (car |\x0;temp~1on7G8~758|))) (if (list? |\x0;temp~1on7G8~760|) (let ((|\x0;t~1on7G8~745| |\x0;temp~1on7G8~760|)) (let ((|\x0;temp~1on7G8~759| (cdr |\x0;temp~1on7G8~758|))) (if (null? |\x0;temp~1on7G8~759|) (begin (let ((|\x0;input~1on7G8~749| (map (lambda (|\x0;t~1on7G8~745|) (cons |\x0;t~1on7G8~745| (cons (ex:syntax-rename '... '() '(|\x0;env~1on7G8~751|) 0 '(core quasisyntax)) '()))) |\x0;t~1on7G8~745|))) (let ((|\x0;fail~1on7G8~752| (lambda () (ex:invalid-form |\x0;input~1on7G8~749|)))) (ex:map-while (lambda (|\x0;input~1on7G8~749|) (if (list? |\x0;input~1on7G8~749|) (let ((|\x0;t~1on7G8~753| |\x0;input~1on7G8~749|)) (list |\x0;t~1on7G8~753|)) #f)) |\x0;input~1on7G8~749| (lambda (|\x0;cols~1on7G8~757| |\x0;rest~1on7G8~756|) (if (null? |\x0;rest~1on7G8~756|) (apply (lambda (|\x0;t~1on7G8~753|) (begin (cons (append (apply append |\x0;t~1on7G8~753|) |\x0;r*~1on7G8~743|) (cons (append (if (= (length |\x0;t~1on7G8~753|) (length |\x0;e~1on7G8~735|)) (map (lambda (|\x0;t~1on7G8~753| |\x0;e~1on7G8~735|) (cons |\x0;t~1on7G8~753| (cons |\x0;e~1on7G8~735| '()))) |\x0;t~1on7G8~753| |\x0;e~1on7G8~735|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '(((t ...) e) ... rep ...) (list |\x0;t~1on7G8~753| |\x0;e~1on7G8~735|))) |\x0;rep~1on7G8~744|) '())))) (if (null? |\x0;cols~1on7G8~757|) '(()) (apply map list |\x0;cols~1on7G8~757|))) (|\x0;fail~1on7G8~752|))))))) (|\x0;fail~1on7G8~742|)))) (|\x0;fail~1on7G8~742|))) (|\x0;fail~1on7G8~742|))) (|\x0;fail~1on7G8~742|)))) (|\x0;fail~1on7G8~742|))) (|\x0;fail~1on7G8~742|))))) (|\x0;fail~1on7G8~742|))) (|\x0;fail~1on7G8~742|)))) (|\x0;fail~1on7G8~657|))))) (|\x0;fail~1on7G8~657|))) (|\x0;fail~1on7G8~657|))) (|\x0;fail~1on7G8~657|))) (|\x0;fail~1on7G8~657|)))))) (if (pair? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~793| (car |\x0;input~1on7G8~653|))) (if (pair? |\x0;temp~1on7G8~793|) (let ((|\x0;temp~1on7G8~795| (car |\x0;temp~1on7G8~793|))) (if (and (ex:identifier? |\x0;temp~1on7G8~795|) (ex:free-identifier=? |\x0;temp~1on7G8~795| (ex:syntax-rename 'unsyntax '() '(|\x0;env~1on7G8~796|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1on7G8~794| (cdr |\x0;temp~1on7G8~793|))) (if (list? |\x0;temp~1on7G8~794|) (let ((|\x0;e~1on7G8~771| |\x0;temp~1on7G8~794|)) (let ((|\x0;temp~1on7G8~792| (cdr |\x0;input~1on7G8~653|))) (let ((|\x0;r~1on7G8~772| |\x0;temp~1on7G8~792|)) (if (= |\x0;level~1on7G8~651| 0) (let ((|\x0;input~1on7G8~775| (list (|\x0;expand~1on7G8~626| |\x0;r~1on7G8~772| 0) (ex:generate-temporaries |\x0;e~1on7G8~771|)))) (let ((|\x0;fail~1on7G8~778| (lambda () (ex:invalid-form |\x0;input~1on7G8~775|)))) (if (pair? |\x0;input~1on7G8~775|) (let ((|\x0;temp~1on7G8~787| (car |\x0;input~1on7G8~775|))) (if (pair? |\x0;temp~1on7G8~787|) (let ((|\x0;temp~1on7G8~791| (car |\x0;temp~1on7G8~787|))) (let ((|\x0;r*~1on7G8~779| |\x0;temp~1on7G8~791|)) (let ((|\x0;temp~1on7G8~788| (cdr |\x0;temp~1on7G8~787|))) (if (pair? |\x0;temp~1on7G8~788|) (let ((|\x0;temp~1on7G8~790| (car |\x0;temp~1on7G8~788|))) (if (list? |\x0;temp~1on7G8~790|) (let ((|\x0;rep~1on7G8~780| |\x0;temp~1on7G8~790|)) (let ((|\x0;temp~1on7G8~789| (cdr |\x0;temp~1on7G8~788|))) (if (null? |\x0;temp~1on7G8~789|) (let ((|\x0;temp~1on7G8~784| (cdr |\x0;input~1on7G8~775|))) (if (pair? |\x0;temp~1on7G8~784|) (let ((|\x0;temp~1on7G8~786| (car |\x0;temp~1on7G8~784|))) (if (list? |\x0;temp~1on7G8~786|) (let ((|\x0;t~1on7G8~781| |\x0;temp~1on7G8~786|)) (let ((|\x0;temp~1on7G8~785| (cdr |\x0;temp~1on7G8~784|))) (if (null? |\x0;temp~1on7G8~785|) (begin (cons (append |\x0;t~1on7G8~781| |\x0;r*~1on7G8~779|) (cons (append (if (= (length |\x0;t~1on7G8~781|) (length |\x0;e~1on7G8~771|)) (map (lambda (|\x0;t~1on7G8~781| |\x0;e~1on7G8~771|) (cons |\x0;t~1on7G8~781| (cons |\x0;e~1on7G8~771| '()))) |\x0;t~1on7G8~781| |\x0;e~1on7G8~771|) (ex:syntax-violation 'syntax "Pattern variables denoting lists of unequal length preceding ellipses" '((t e) ... rep ...) (list |\x0;t~1on7G8~781| |\x0;e~1on7G8~771|))) |\x0;rep~1on7G8~780|) '()))) (|\x0;fail~1on7G8~778|)))) (|\x0;fail~1on7G8~778|))) (|\x0;fail~1on7G8~778|))) (|\x0;fail~1on7G8~778|)))) (|\x0;fail~1on7G8~778|))) (|\x0;fail~1on7G8~778|))))) (|\x0;fail~1on7G8~778|))) (|\x0;fail~1on7G8~778|)))) (|\x0;fail~1on7G8~656|))))) (|\x0;fail~1on7G8~656|))) (|\x0;fail~1on7G8~656|))) (|\x0;fail~1on7G8~656|))) (|\x0;fail~1on7G8~656|)))))) (if (pair? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~811| (car |\x0;input~1on7G8~653|))) (if (and (ex:identifier? |\x0;temp~1on7G8~811|) (ex:free-identifier=? |\x0;temp~1on7G8~811| (ex:syntax-rename 'unsyntax '() '(|\x0;env~1on7G8~812|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1on7G8~808| (cdr |\x0;input~1on7G8~653|))) (if (pair? |\x0;temp~1on7G8~808|) (let ((|\x0;temp~1on7G8~810| (car |\x0;temp~1on7G8~808|))) (let ((|\x0;e~1on7G8~797| |\x0;temp~1on7G8~810|)) (let ((|\x0;temp~1on7G8~809| (cdr |\x0;temp~1on7G8~808|))) (if (null? |\x0;temp~1on7G8~809|) (if (= |\x0;level~1on7G8~651| 0) (let ((|\x0;input~1on7G8~800| (ex:generate-temporaries '(t)))) (let ((|\x0;fail~1on7G8~802| (lambda () (ex:invalid-form |\x0;input~1on7G8~800|)))) (if (pair? |\x0;input~1on7G8~800|) (let ((|\x0;temp~1on7G8~807| (car |\x0;input~1on7G8~800|))) (let ((|\x0;t~1on7G8~803| |\x0;temp~1on7G8~807|)) (let ((|\x0;temp~1on7G8~806| (cdr |\x0;input~1on7G8~800|))) (if (null? |\x0;temp~1on7G8~806|) (begin (cons |\x0;t~1on7G8~803| (cons (cons (cons |\x0;t~1on7G8~803| (cons |\x0;e~1on7G8~797| '())) '()) '()))) (|\x0;fail~1on7G8~802|))))) (|\x0;fail~1on7G8~802|)))) (|\x0;fail~1on7G8~655|)) (|\x0;fail~1on7G8~655|))))) (|\x0;fail~1on7G8~655|))) (|\x0;fail~1on7G8~655|))) (|\x0;fail~1on7G8~655|)))))) (if (pair? |\x0;input~1on7G8~653|) (let ((|\x0;temp~1on7G8~839| (car |\x0;input~1on7G8~653|))) (if (and (ex:identifier? |\x0;temp~1on7G8~839|) (ex:free-identifier=? |\x0;temp~1on7G8~839| (ex:syntax-rename 'quasisyntax '() '(|\x0;env~1on7G8~840|) 0 '(core quasisyntax)))) (let ((|\x0;temp~1on7G8~836| (cdr |\x0;input~1on7G8~653|))) (if (pair? |\x0;temp~1on7G8~836|) (let ((|\x0;temp~1on7G8~838| (car |\x0;temp~1on7G8~836|))) (let ((|\x0;e~1on7G8~813| |\x0;temp~1on7G8~838|)) (let ((|\x0;temp~1on7G8~837| (cdr |\x0;temp~1on7G8~836|))) (if (null? |\x0;temp~1on7G8~837|) (let ((|\x0;input~1on7G8~816| (list |\x0;x~1on7G8~650| (|\x0;expand~1on7G8~626| |\x0;e~1on7G8~813| (+ |\x0;level~1on7G8~651| 1))))) (let ((|\x0;fail~1on7G8~818| (lambda () (ex:invalid-form |\x0;input~1on7G8~816|)))) (if (pair? |\x0;input~1on7G8~816|) (let ((|\x0;temp~1on7G8~831| (car |\x0;input~1on7G8~816|))) (if (pair? |\x0;temp~1on7G8~831|) (let ((|\x0;temp~1on7G8~835| (car |\x0;temp~1on7G8~831|))) (let ((|\x0;k~1on7G8~819| |\x0;temp~1on7G8~835|)) (let ((|\x0;temp~1on7G8~832| (cdr |\x0;temp~1on7G8~831|))) (if (pair? |\x0;temp~1on7G8~832|) (let ((|\x0;temp~1on7G8~834| (car |\x0;temp~1on7G8~832|))) (let ((|\x0;temp~1on7G8~833| (cdr |\x0;temp~1on7G8~832|))) (if (null? |\x0;temp~1on7G8~833|) (let ((|\x0;temp~1on7G8~824| (cdr |\x0;input~1on7G8~816|))) (if (pair? |\x0;temp~1on7G8~824|) (let ((|\x0;temp~1on7G8~826| (car |\x0;temp~1on7G8~824|))) (if (pair? |\x0;temp~1on7G8~826|) (let ((|\x0;temp~1on7G8~830| (car |\x0;temp~1on7G8~826|))) (let ((|\x0;e*~1on7G8~820| |\x0;temp~1on7G8~830|)) (let ((|\x0;temp~1on7G8~827| (cdr |\x0;temp~1on7G8~826|))) (if (pair? |\x0;temp~1on7G8~827|) (let ((|\x0;temp~1on7G8~829| (car |\x0;temp~1on7G8~827|))) (let ((|\x0;reps~1on7G8~821| |\x0;temp~1on7G8~829|)) (let ((|\x0;temp~1on7G8~828| (cdr |\x0;temp~1on7G8~827|))) (if (null? |\x0;temp~1on7G8~828|) (let ((|\x0;temp~1on7G8~825| (cdr |\x0;temp~1on7G8~824|))) (if (null? |\x0;temp~1on7G8~825|) (begin (cons (cons |\x0;k~1on7G8~819| (cons |\x0;e*~1on7G8~820| '())) (cons |\x0;reps~1on7G8~821| '()))) (|\x0;fail~1on7G8~818|))) (|\x0;fail~1on7G8~818|))))) (|\x0;fail~1on7G8~818|))))) (|\x0;fail~1on7G8~818|))) (|\x0;fail~1on7G8~818|))) (|\x0;fail~1on7G8~818|)))) (|\x0;fail~1on7G8~818|))))) (|\x0;fail~1on7G8~818|))) (|\x0;fail~1on7G8~818|)))) (|\x0;fail~1on7G8~654|))))) (|\x0;fail~1on7G8~654|))) (|\x0;fail~1on7G8~654|))) (|\x0;fail~1on7G8~654|)))))) (let ((|\x0;input~1on7G8~628| |\x0;e~1on7G8~625|)) (let ((|\x0;fail~1on7G8~629| (lambda () (ex:invalid-form |\x0;input~1on7G8~628|)))) (if (pair? |\x0;input~1on7G8~628|) (let ((|\x0;temp~1on7G8~648| (car |\x0;input~1on7G8~628|))) (let ((|\x0;temp~1on7G8~645| (cdr |\x0;input~1on7G8~628|))) (if (pair? |\x0;temp~1on7G8~645|) (let ((|\x0;temp~1on7G8~647| (car |\x0;temp~1on7G8~645|))) (let ((|\x0;template~1on7G8~630| |\x0;temp~1on7G8~647|)) (let ((|\x0;temp~1on7G8~646| (cdr |\x0;temp~1on7G8~645|))) (if (null? |\x0;temp~1on7G8~646|) (let ((|\x0;input~1on7G8~633| (|\x0;expand~1on7G8~626| |\x0;template~1on7G8~630| 0))) (let ((|\x0;fail~1on7G8~635| (lambda () (ex:invalid-form |\x0;input~1on7G8~633|)))) (if (pair? |\x0;input~1on7G8~633|) (let ((|\x0;temp~1on7G8~644| (car |\x0;input~1on7G8~633|))) (let ((|\x0;template*~1on7G8~636| |\x0;temp~1on7G8~644|)) (let ((|\x0;temp~1on7G8~641| (cdr |\x0;input~1on7G8~633|))) (if (pair? |\x0;temp~1on7G8~641|) (let ((|\x0;temp~1on7G8~643| (car |\x0;temp~1on7G8~641|))) (let ((|\x0;replacements~1on7G8~637| |\x0;temp~1on7G8~643|)) (let ((|\x0;temp~1on7G8~642| (cdr |\x0;temp~1on7G8~641|))) (if (null? |\x0;temp~1on7G8~642|) (begin (cons (ex:syntax-rename 'with-syntax '() '(|\x0;env~1on7G8~640|) 0 '(core quasisyntax)) (cons |\x0;replacements~1on7G8~637| (cons (cons (ex:syntax-rename 'syntax '() '(|\x0;env~1on7G8~640|) 0 '(core quasisyntax)) (cons |\x0;template*~1on7G8~636| '())) '())))) (|\x0;fail~1on7G8~635|))))) (|\x0;fail~1on7G8~635|))))) (|\x0;fail~1on7G8~635|)))) (|\x0;fail~1on7G8~629|))))) (|\x0;fail~1on7G8~629|)))) (|\x0;fail~1on7G8~629|))))) ex:undefined))) (ex:register-macro! '|\x0;unsyntax~1on7G8~841| (lambda (|\x0;e~1on7G8~843|) (ex:syntax-violation 'unsyntax "Invalid expression" |\x0;e~1on7G8~843|))) (ex:register-macro! '|\x0;unsyntax-splicing~1on7G8~845| (lambda (|\x0;e~1on7G8~847|) (ex:syntax-violation 'unsyntax "Invalid expression" |\x0;e~1on7G8~847|))) (values)) (lambda () (values)) '|\x0;build~1on7G8~849|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core quasiquote) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~1273| 0 1 2 3 4 5) (|\x0;env~1on7G8~1263| 6 1 2 3 4 5) (|\x0;env~1on7G8~1254| 7 8 1 2 3 4 5) (|\x0;env~1on7G8~1244| 9 8 1 2 3 4 5) (|\x0;env~1on7G8~1207| 10 11 12 13 3 4 5) (|\x0;env~1on7G8~1197| 14 11 12 13 3 4 5) (|\x0;env~1on7G8~987| 15 16 17 3 4 5) (|\x0;env~1on7G8~982| 18 19 16 17 3 4 5) (|\x0;env~1on7G8~960| 20 21 22 23 24 25 16 17 3 4 5) (|\x0;env~1on7G8~929| 26 27 16 17 3 4 5) (|\x0;env~1on7G8~915| 28 29 16 17 3 4 5) (|\x0;env~1on7G8~899| 30 31 16 17 3 4 5)) (31 (((x) . #f))) (30 (((temp |\x0;c~1on7G8~890|) . #f))) (29 (((x) . #f))) (28 (((temp |\x0;c~1on7G8~906|) . #f))) (27 (((x) . #f))) (26 (((temp |\x0;c~1on7G8~920|) . #f))) (25 (((x) . #f) ((y) . #f))) (24 ()) (23 (((f) variable |\x0;f~1on7G8~939| (1) #f (core quasiquote)))) (22 (((x*) variable |\x0;x*~1on7G8~946| (1) #f (core quasiquote)))) (21 ()) (20 (((temp |\x0;c~1on7G8~951|) . #f) ((temp |\x0;c~1on7G8~950|) . #f))) (19 (((x) . #f))) (18 (((temp |\x0;c~1on7G8~973|) . #f))) (17 (((x) variable |\x0;x~1on7G8~872| (1) #f (core quasiquote)))) (16 ()) (15 (((x) . #f))) (14 (((p) . #f))) (13 (((p) variable |\x0;p~1on7G8~1175| (1) #f (core quasiquote)) ((lev) variable |\x0;lev~1on7G8~1176| (1) #f (core quasiquote)))) (12 ()) (11 (((p) . #f) ((q) . #f))) (10 (((p) . #f))) (9 (((p) . #f))) (8 (((p) . #f) ((q) . #f))) (7 (((p) . #f))) (6 (((p) . #f))) (5 (((unquote-splicing) macro |\x0;unquote-splicing~1on7G8~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1on7G8~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1on7G8~850| (0) #f (core quasiquote)) ((undefined) variable ex:undefined (0 1) #f ()) ((eval) variable ex:eval (0 1) #f ()) ((environment-bindings) variable ex:environment-bindings (0 1) #f ()) ((environment) variable ex:environment (0 1) #f ()) ((syntax-violation) variable ex:syntax-violation (0 1) #f ()) ((syntax->datum) variable ex:syntax->datum (0 1) #f ()) ((datum->syntax) variable ex:datum->syntax (0 1) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0 1) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0 1) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0 1) #f ()) ((identifier?) variable ex:identifier? (0 1) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0 1) #f ()) ((syntax-case) macro syntax-case (0 1) #f ()) ((syntax) macro syntax (0 1) #f ()) ((...) macro ... (0 1) #f ()) ((_) macro _ (0 1) #f ()) ((letrec-syntax) macro letrec-syntax (0 1) #f ()) ((let-syntax) macro let-syntax (0 1) #f ()) ((define-syntax) macro define-syntax (0 1) #f ()) ((define) macro define (0 1) #f ()) ((or) macro or (0 1) #f ()) ((and) macro and (0 1) #f ()) ((set!) macro set! (0 1) #f ()) ((quote) macro quote (0 1) #f ()) ((lambda) macro lambda (0 1) #f ()) ((if) macro if (0 1) #f ()) ((begin) macro begin (0 1) #f ()) ((letrec*) macro |\x0;letrec*~1on7G8~216| (0 1) #f (core let)) ((letrec) macro |\x0;letrec~1on7G8~192| (0 1) #f (core let)) ((let) macro |\x0;let~1on7G8~144| (0 1) #f (core let)) ((=>) macro |\x0;=>~1on7G8~568| (0 1) #f (core derived)) ((else) macro |\x0;else~1on7G8~572| (0 1) #f (core derived)) ((case) macro |\x0;case~1on7G8~435| (0 1) #f (core derived)) ((cond) macro |\x0;cond~1on7G8~320| (0 1) #f (core derived)) ((let*) macro |\x0;let*~1on7G8~241| (0 1) #f (core derived)) ((with-syntax) macro |\x0;with-syntax~1on7G8~3| (1) #f (core with-syntax)) ((unsyntax-splicing) macro |\x0;unsyntax-splicing~1on7G8~845| (1) #f (core quasisyntax)) ((unsyntax) macro |\x0;unsyntax~1on7G8~841| (1) #f (core quasisyntax)) ((quasisyntax) macro |\x0;quasisyntax~1on7G8~623| (1) #f (core quasisyntax)) ((list->vector) variable list->vector (0 1) #f ()) ((vector) variable vector (0 1) #f ()) ((list) variable list (0 1) #f ()) ((map) variable map (0 1) #f ()) ((append) variable append (0 1) #f ()) ((cdr) variable cdr (0 1) #f ()) ((car) variable car (0 1) #f ()) ((cons) variable cons (0 1) #f ()) ((null?) variable null? (0 1) #f ()) ((-) variable - (0 1) #f ()) ((+) variable + (0 1) #f ()) ((=) variable = (0 1) #f ()))) (4 ()) (3 (((emit) variable |\x0;emit~1on7G8~859| (1) #f (core quasiquote)) ((quasivector) variable |\x0;quasivector~1on7G8~858| (1) #f (core quasiquote)) ((quasilist*) variable |\x0;quasilist*~1on7G8~857| (1) #f (core quasiquote)) ((quasiappend) variable |\x0;quasiappend~1on7G8~856| (1) #f (core quasiquote)) ((quasicons) variable |\x0;quasicons~1on7G8~855| (1) #f (core quasiquote)) ((vquasi) variable |\x0;vquasi~1on7G8~854| (1) #f (core quasiquote)) ((quasi) variable |\x0;quasi~1on7G8~853| (1) #f (core quasiquote)))) (2 (((p) variable |\x0;p~1on7G8~1215| (1) #f (core quasiquote)) ((lev) variable |\x0;lev~1on7G8~1216| (1) #f (core quasiquote)))) (1 ()) (0 (((p) . #f)))))) '((quasiquote macro |\x0;quasiquote~1on7G8~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1on7G8~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1on7G8~1283| (0) #f (core quasiquote))) '(((core quasisyntax) 1) ((core with-syntax) 1) ((core derived) 0 1) ((core let) 0 1) ((core primitives) 0 1)) '(|\x0;build~1on7G8~849| |\x0;build~1on7G8~57| |\x0;build~1on7G8~576| |\x0;build~1on7G8~240| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;quasiquote~1on7G8~850| ((lambda () ((lambda (|\x0;emit~1on7G8~859| |\x0;quasivector~1on7G8~858| |\x0;quasilist*~1on7G8~857| |\x0;quasiappend~1on7G8~856| |\x0;quasicons~1on7G8~855| |\x0;vquasi~1on7G8~854| |\x0;quasi~1on7G8~853|) (set! |\x0;quasi~1on7G8~853| (lambda (|\x0;p~1on7G8~1215| |\x0;lev~1on7G8~1216|) (let ((|\x0;input~1on7G8~1218| |\x0;p~1on7G8~1215|)) (let ((|\x0;fail~1on7G8~1219| (lambda () (let ((|\x0;fail~1on7G8~1220| (lambda () (let ((|\x0;fail~1on7G8~1221| (lambda () (let ((|\x0;fail~1on7G8~1222| (lambda () (let ((|\x0;fail~1on7G8~1223| (lambda () (ex:invalid-form |\x0;input~1on7G8~1218|)))) (let ((|\x0;p~1on7G8~1224| |\x0;input~1on7G8~1218|)) (cons '"quote" (cons |\x0;p~1on7G8~1224| '()))))))) (if (vector? |\x0;input~1on7G8~1218|) (let ((|\x0;temp~1on7G8~1228| (vector->list |\x0;input~1on7G8~1218|))) (if (list? |\x0;temp~1on7G8~1228|) (let ((|\x0;x~1on7G8~1226| |\x0;temp~1on7G8~1228|)) (|\x0;quasivector~1on7G8~858| (|\x0;vquasi~1on7G8~854| |\x0;x~1on7G8~1226| |\x0;lev~1on7G8~1216|))) (|\x0;fail~1on7G8~1222|))) (|\x0;fail~1on7G8~1222|)))))) (if (pair? |\x0;input~1on7G8~1218|) (let ((|\x0;temp~1on7G8~1260| (car |\x0;input~1on7G8~1218|))) (let ((|\x0;p~1on7G8~1229| |\x0;temp~1on7G8~1260|)) (let ((|\x0;temp~1on7G8~1259| (cdr |\x0;input~1on7G8~1218|))) (let ((|\x0;q~1on7G8~1230| |\x0;temp~1on7G8~1259|)) (let ((|\x0;input~1on7G8~1232| |\x0;p~1on7G8~1229|)) (let ((|\x0;fail~1on7G8~1234| (lambda () (let ((|\x0;fail~1on7G8~1235| (lambda () (let ((|\x0;fail~1on7G8~1236| (lambda () (ex:invalid-form |\x0;input~1on7G8~1232|)))) (|\x0;quasicons~1on7G8~855| (|\x0;quasi~1on7G8~853| |\x0;p~1on7G8~1229| |\x0;lev~1on7G8~1216|) (|\x0;quasi~1on7G8~853| |\x0;q~1on7G8~1230| |\x0;lev~1on7G8~1216|)))))) (if (pair? |\x0;input~1on7G8~1232|) (let ((|\x0;temp~1on7G8~1248| (car |\x0;input~1on7G8~1232|))) (if (and (ex:identifier? |\x0;temp~1on7G8~1248|) (ex:free-identifier=? |\x0;temp~1on7G8~1248| (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1on7G8~1244|) 0 '(core quasiquote)))) (let ((|\x0;temp~1on7G8~1247| (cdr |\x0;input~1on7G8~1232|))) (if (list? |\x0;temp~1on7G8~1247|) (let ((|\x0;p~1on7G8~1239| |\x0;temp~1on7G8~1247|)) (if (= |\x0;lev~1on7G8~1216| 0) (|\x0;quasiappend~1on7G8~856| (map (lambda (|\x0;p~1on7G8~1239|) (cons '"value" (cons |\x0;p~1on7G8~1239| '()))) |\x0;p~1on7G8~1239|) (|\x0;quasi~1on7G8~853| |\x0;q~1on7G8~1230| |\x0;lev~1on7G8~1216|)) (|\x0;quasicons~1on7G8~855| (|\x0;quasicons~1on7G8~855| (cons '"quote" (cons (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1on7G8~1244|) 0 '(core quasiquote)) '())) (|\x0;quasi~1on7G8~853| |\x0;p~1on7G8~1239| (- |\x0;lev~1on7G8~1216| 1))) (|\x0;quasi~1on7G8~853| |\x0;q~1on7G8~1230| |\x0;lev~1on7G8~1216|)))) (|\x0;fail~1on7G8~1235|))) (|\x0;fail~1on7G8~1235|))) (|\x0;fail~1on7G8~1235|)))))) (if (pair? |\x0;input~1on7G8~1232|) (let ((|\x0;temp~1on7G8~1258| (car |\x0;input~1on7G8~1232|))) (if (and (ex:identifier? |\x0;temp~1on7G8~1258|) (ex:free-identifier=? |\x0;temp~1on7G8~1258| (ex:syntax-rename 'unquote '() '(|\x0;env~1on7G8~1254|) 0 '(core quasiquote)))) (let ((|\x0;temp~1on7G8~1257| (cdr |\x0;input~1on7G8~1232|))) (if (list? |\x0;temp~1on7G8~1257|) (let ((|\x0;p~1on7G8~1249| |\x0;temp~1on7G8~1257|)) (if (= |\x0;lev~1on7G8~1216| 0) (|\x0;quasilist*~1on7G8~857| (map (lambda (|\x0;p~1on7G8~1249|) (cons '"value" (cons |\x0;p~1on7G8~1249| '()))) |\x0;p~1on7G8~1249|) (|\x0;quasi~1on7G8~853| |\x0;q~1on7G8~1230| |\x0;lev~1on7G8~1216|)) (|\x0;quasicons~1on7G8~855| (|\x0;quasicons~1on7G8~855| (cons '"quote" (cons (ex:syntax-rename 'unquote '() '(|\x0;env~1on7G8~1254|) 0 '(core quasiquote)) '())) (|\x0;quasi~1on7G8~853| |\x0;p~1on7G8~1249| (- |\x0;lev~1on7G8~1216| 1))) (|\x0;quasi~1on7G8~853| |\x0;q~1on7G8~1230| |\x0;lev~1on7G8~1216|)))) (|\x0;fail~1on7G8~1234|))) (|\x0;fail~1on7G8~1234|))) (|\x0;fail~1on7G8~1234|)))))))) (|\x0;fail~1on7G8~1221|)))))) (if (pair? |\x0;input~1on7G8~1218|) (let ((|\x0;temp~1on7G8~1268| (car |\x0;input~1on7G8~1218|))) (if (and (ex:identifier? |\x0;temp~1on7G8~1268|) (ex:free-identifier=? |\x0;temp~1on7G8~1268| (ex:syntax-rename 'quasiquote '() '(|\x0;env~1on7G8~1263|) 0 '(core quasiquote)))) (let ((|\x0;temp~1on7G8~1265| (cdr |\x0;input~1on7G8~1218|))) (if (pair? |\x0;temp~1on7G8~1265|) (let ((|\x0;temp~1on7G8~1267| (car |\x0;temp~1on7G8~1265|))) (let ((|\x0;p~1on7G8~1261| |\x0;temp~1on7G8~1267|)) (let ((|\x0;temp~1on7G8~1266| (cdr |\x0;temp~1on7G8~1265|))) (if (null? |\x0;temp~1on7G8~1266|) (|\x0;quasicons~1on7G8~855| (cons '"quote" (cons (ex:syntax-rename 'quasiquote '() '(|\x0;env~1on7G8~1263|) 0 '(core quasiquote)) '())) (|\x0;quasi~1on7G8~853| (cons |\x0;p~1on7G8~1261| '()) (+ |\x0;lev~1on7G8~1216| 1))) (|\x0;fail~1on7G8~1220|))))) (|\x0;fail~1on7G8~1220|))) (|\x0;fail~1on7G8~1220|))) (|\x0;fail~1on7G8~1220|)))))) (if (pair? |\x0;input~1on7G8~1218|) (let ((|\x0;temp~1on7G8~1278| (car |\x0;input~1on7G8~1218|))) (if (and (ex:identifier? |\x0;temp~1on7G8~1278|) (ex:free-identifier=? |\x0;temp~1on7G8~1278| (ex:syntax-rename 'unquote '() '(|\x0;env~1on7G8~1273|) 0 '(core quasiquote)))) (let ((|\x0;temp~1on7G8~1275| (cdr |\x0;input~1on7G8~1218|))) (if (pair? |\x0;temp~1on7G8~1275|) (let ((|\x0;temp~1on7G8~1277| (car |\x0;temp~1on7G8~1275|))) (let ((|\x0;p~1on7G8~1269| |\x0;temp~1on7G8~1277|)) (let ((|\x0;temp~1on7G8~1276| (cdr |\x0;temp~1on7G8~1275|))) (if (null? |\x0;temp~1on7G8~1276|) (if (= |\x0;lev~1on7G8~1216| 0) (cons '"value" (cons |\x0;p~1on7G8~1269| '())) (|\x0;quasicons~1on7G8~855| (cons '"quote" (cons (ex:syntax-rename 'unquote '() '(|\x0;env~1on7G8~1273|) 0 '(core quasiquote)) '())) (|\x0;quasi~1on7G8~853| (cons |\x0;p~1on7G8~1269| '()) (- |\x0;lev~1on7G8~1216| 1)))) (|\x0;fail~1on7G8~1219|))))) (|\x0;fail~1on7G8~1219|))) (|\x0;fail~1on7G8~1219|))) (|\x0;fail~1on7G8~1219|)))))) (set! |\x0;vquasi~1on7G8~854| (lambda (|\x0;p~1on7G8~1175| |\x0;lev~1on7G8~1176|) (let ((|\x0;input~1on7G8~1178| |\x0;p~1on7G8~1175|)) (let ((|\x0;fail~1on7G8~1179| (lambda () (let ((|\x0;fail~1on7G8~1180| (lambda () (ex:invalid-form |\x0;input~1on7G8~1178|)))) (if (null? |\x0;input~1on7G8~1178|) (cons '"quote" (cons '() '())) (|\x0;fail~1on7G8~1180|)))))) (if (pair? |\x0;input~1on7G8~1178|) (let ((|\x0;temp~1on7G8~1213| (car |\x0;input~1on7G8~1178|))) (let ((|\x0;p~1on7G8~1182| |\x0;temp~1on7G8~1213|)) (let ((|\x0;temp~1on7G8~1212| (cdr |\x0;input~1on7G8~1178|))) (let ((|\x0;q~1on7G8~1183| |\x0;temp~1on7G8~1212|)) (let ((|\x0;input~1on7G8~1185| |\x0;p~1on7G8~1182|)) (let ((|\x0;fail~1on7G8~1187| (lambda () (let ((|\x0;fail~1on7G8~1188| (lambda () (let ((|\x0;fail~1on7G8~1189| (lambda () (ex:invalid-form |\x0;input~1on7G8~1185|)))) (|\x0;quasicons~1on7G8~855| (|\x0;quasi~1on7G8~853| |\x0;p~1on7G8~1182| |\x0;lev~1on7G8~1176|) (|\x0;vquasi~1on7G8~854| |\x0;q~1on7G8~1183| |\x0;lev~1on7G8~1176|)))))) (if (pair? |\x0;input~1on7G8~1185|) (let ((|\x0;temp~1on7G8~1201| (car |\x0;input~1on7G8~1185|))) (if (and (ex:identifier? |\x0;temp~1on7G8~1201|) (ex:free-identifier=? |\x0;temp~1on7G8~1201| (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1on7G8~1197|) 0 '(core quasiquote)))) (let ((|\x0;temp~1on7G8~1200| (cdr |\x0;input~1on7G8~1185|))) (if (list? |\x0;temp~1on7G8~1200|) (let ((|\x0;p~1on7G8~1192| |\x0;temp~1on7G8~1200|)) (if (= |\x0;lev~1on7G8~1176| 0) (|\x0;quasiappend~1on7G8~856| (map (lambda (|\x0;p~1on7G8~1192|) (cons '"value" (cons |\x0;p~1on7G8~1192| '()))) |\x0;p~1on7G8~1192|) (|\x0;vquasi~1on7G8~854| |\x0;q~1on7G8~1183| |\x0;lev~1on7G8~1176|)) (|\x0;quasicons~1on7G8~855| (|\x0;quasicons~1on7G8~855| (cons '"quote" (cons (ex:syntax-rename 'unquote-splicing '() '(|\x0;env~1on7G8~1197|) 0 '(core quasiquote)) '())) (|\x0;quasi~1on7G8~853| |\x0;p~1on7G8~1192| (- |\x0;lev~1on7G8~1176| 1))) (|\x0;vquasi~1on7G8~854| |\x0;q~1on7G8~1183| |\x0;lev~1on7G8~1176|)))) (|\x0;fail~1on7G8~1188|))) (|\x0;fail~1on7G8~1188|))) (|\x0;fail~1on7G8~1188|)))))) (if (pair? |\x0;input~1on7G8~1185|) (let ((|\x0;temp~1on7G8~1211| (car |\x0;input~1on7G8~1185|))) (if (and (ex:identifier? |\x0;temp~1on7G8~1211|) (ex:free-identifier=? |\x0;temp~1on7G8~1211| (ex:syntax-rename 'unquote '() '(|\x0;env~1on7G8~1207|) 0 '(core quasiquote)))) (let ((|\x0;temp~1on7G8~1210| (cdr |\x0;input~1on7G8~1185|))) (if (list? |\x0;temp~1on7G8~1210|) (let ((|\x0;p~1on7G8~1202| |\x0;temp~1on7G8~1210|)) (if (= |\x0;lev~1on7G8~1176| 0) (|\x0;quasilist*~1on7G8~857| (map (lambda (|\x0;p~1on7G8~1202|) (cons '"value" (cons |\x0;p~1on7G8~1202| '()))) |\x0;p~1on7G8~1202|) (|\x0;vquasi~1on7G8~854| |\x0;q~1on7G8~1183| |\x0;lev~1on7G8~1176|)) (|\x0;quasicons~1on7G8~855| (|\x0;quasicons~1on7G8~855| (cons '"quote" (cons (ex:syntax-rename 'unquote '() '(|\x0;env~1on7G8~1207|) 0 '(core quasiquote)) '())) (|\x0;quasi~1on7G8~853| |\x0;p~1on7G8~1202| (- |\x0;lev~1on7G8~1176| 1))) (|\x0;vquasi~1on7G8~854| |\x0;q~1on7G8~1183| |\x0;lev~1on7G8~1176|)))) (|\x0;fail~1on7G8~1187|))) (|\x0;fail~1on7G8~1187|))) (|\x0;fail~1on7G8~1187|)))))))) (|\x0;fail~1on7G8~1179|)))))) (set! |\x0;quasicons~1on7G8~855| (lambda (|\x0;x~1on7G8~1125| |\x0;y~1on7G8~1126|) (let ((|\x0;input~1on7G8~1129| (list |\x0;x~1on7G8~1125| |\x0;y~1on7G8~1126|))) (let ((|\x0;fail~1on7G8~1130| (lambda () (ex:invalid-form |\x0;input~1on7G8~1129|)))) (if (pair? |\x0;input~1on7G8~1129|) (let ((|\x0;temp~1on7G8~1173| (car |\x0;input~1on7G8~1129|))) (let ((|\x0;x~1on7G8~1131| |\x0;temp~1on7G8~1173|)) (let ((|\x0;temp~1on7G8~1170| (cdr |\x0;input~1on7G8~1129|))) (if (pair? |\x0;temp~1on7G8~1170|) (let ((|\x0;temp~1on7G8~1172| (car |\x0;temp~1on7G8~1170|))) (let ((|\x0;y~1on7G8~1132| |\x0;temp~1on7G8~1172|)) (let ((|\x0;temp~1on7G8~1171| (cdr |\x0;temp~1on7G8~1170|))) (if (null? |\x0;temp~1on7G8~1171|) (begin (let ((|\x0;input~1on7G8~1135| |\x0;y~1on7G8~1132|)) (let ((|\x0;fail~1on7G8~1137| (lambda () (let ((|\x0;fail~1on7G8~1138| (lambda () (let ((|\x0;fail~1on7G8~1139| (lambda () (let ((|\x0;fail~1on7G8~1140| (lambda () (ex:invalid-form |\x0;input~1on7G8~1135|)))) (cons '"list*" (cons |\x0;x~1on7G8~1131| (cons |\x0;y~1on7G8~1132| '()))))))) (if (pair? |\x0;input~1on7G8~1135|) (let ((|\x0;temp~1on7G8~1145| (car |\x0;input~1on7G8~1135|))) (if (equal? |\x0;temp~1on7G8~1145| '"list*") (let ((|\x0;temp~1on7G8~1144| (cdr |\x0;input~1on7G8~1135|))) (let ((|\x0;stuff~1on7G8~1142| |\x0;temp~1on7G8~1144|)) (cons '"list*" (cons |\x0;x~1on7G8~1131| |\x0;stuff~1on7G8~1142|)))) (|\x0;fail~1on7G8~1139|))) (|\x0;fail~1on7G8~1139|)))))) (if (pair? |\x0;input~1on7G8~1135|) (let ((|\x0;temp~1on7G8~1149| (car |\x0;input~1on7G8~1135|))) (if (equal? |\x0;temp~1on7G8~1149| '"list") (let ((|\x0;temp~1on7G8~1148| (cdr |\x0;input~1on7G8~1135|))) (let ((|\x0;stuff~1on7G8~1146| |\x0;temp~1on7G8~1148|)) (cons '"list" (cons |\x0;x~1on7G8~1131| |\x0;stuff~1on7G8~1146|)))) (|\x0;fail~1on7G8~1138|))) (|\x0;fail~1on7G8~1138|)))))) (if (pair? |\x0;input~1on7G8~1135|) (let ((|\x0;temp~1on7G8~1169| (car |\x0;input~1on7G8~1135|))) (if (equal? |\x0;temp~1on7G8~1169| '"quote") (let ((|\x0;temp~1on7G8~1166| (cdr |\x0;input~1on7G8~1135|))) (if (pair? |\x0;temp~1on7G8~1166|) (let ((|\x0;temp~1on7G8~1168| (car |\x0;temp~1on7G8~1166|))) (let ((|\x0;dy~1on7G8~1150| |\x0;temp~1on7G8~1168|)) (let ((|\x0;temp~1on7G8~1167| (cdr |\x0;temp~1on7G8~1166|))) (if (null? |\x0;temp~1on7G8~1167|) (let ((|\x0;input~1on7G8~1152| |\x0;x~1on7G8~1131|)) (let ((|\x0;fail~1on7G8~1154| (lambda () (let ((|\x0;fail~1on7G8~1155| (lambda () (ex:invalid-form |\x0;input~1on7G8~1152|)))) (if (null? |\x0;dy~1on7G8~1150|) (cons '"list" (cons |\x0;x~1on7G8~1131| '())) (cons '"list*" (cons |\x0;x~1on7G8~1131| (cons |\x0;y~1on7G8~1132| '())))))))) (if (pair? |\x0;input~1on7G8~1152|) (let ((|\x0;temp~1on7G8~1165| (car |\x0;input~1on7G8~1152|))) (if (equal? |\x0;temp~1on7G8~1165| '"quote") (let ((|\x0;temp~1on7G8~1162| (cdr |\x0;input~1on7G8~1152|))) (if (pair? |\x0;temp~1on7G8~1162|) (let ((|\x0;temp~1on7G8~1164| (car |\x0;temp~1on7G8~1162|))) (let ((|\x0;dx~1on7G8~1160| |\x0;temp~1on7G8~1164|)) (let ((|\x0;temp~1on7G8~1163| (cdr |\x0;temp~1on7G8~1162|))) (if (null? |\x0;temp~1on7G8~1163|) (cons '"quote" (cons (cons |\x0;dx~1on7G8~1160| |\x0;dy~1on7G8~1150|) '())) (|\x0;fail~1on7G8~1154|))))) (|\x0;fail~1on7G8~1154|))) (|\x0;fail~1on7G8~1154|))) (|\x0;fail~1on7G8~1154|)))) (|\x0;fail~1on7G8~1137|))))) (|\x0;fail~1on7G8~1137|))) (|\x0;fail~1on7G8~1137|))) (|\x0;fail~1on7G8~1137|))))) (|\x0;fail~1on7G8~1130|))))) (|\x0;fail~1on7G8~1130|))))) (|\x0;fail~1on7G8~1130|)))))) (set! |\x0;quasiappend~1on7G8~856| (lambda (|\x0;x~1on7G8~1084| |\x0;y~1on7G8~1085|) (let ((|\x0;input~1on7G8~1087| |\x0;y~1on7G8~1085|)) (let ((|\x0;fail~1on7G8~1088| (lambda () (let ((|\x0;fail~1on7G8~1089| (lambda () (ex:invalid-form |\x0;input~1on7G8~1087|)))) (if (null? |\x0;x~1on7G8~1084|) (begin |\x0;y~1on7G8~1085|) (begin (let ((|\x0;input~1on7G8~1096| (list |\x0;x~1on7G8~1084| |\x0;y~1on7G8~1085|))) (let ((|\x0;fail~1on7G8~1097| (lambda () (ex:invalid-form |\x0;input~1on7G8~1096|)))) (if (pair? |\x0;input~1on7G8~1096|) (let ((|\x0;temp~1on7G8~1105| (car |\x0;input~1on7G8~1096|))) (if (list? |\x0;temp~1on7G8~1105|) (let ((|\x0;p~1on7G8~1098| |\x0;temp~1on7G8~1105|)) (let ((|\x0;temp~1on7G8~1102| (cdr |\x0;input~1on7G8~1096|))) (if (pair? |\x0;temp~1on7G8~1102|) (let ((|\x0;temp~1on7G8~1104| (car |\x0;temp~1on7G8~1102|))) (let ((|\x0;y~1on7G8~1099| |\x0;temp~1on7G8~1104|)) (let ((|\x0;temp~1on7G8~1103| (cdr |\x0;temp~1on7G8~1102|))) (if (null? |\x0;temp~1on7G8~1103|) (begin (cons '"append" (append |\x0;p~1on7G8~1098| (cons |\x0;y~1on7G8~1099| '())))) (|\x0;fail~1on7G8~1097|))))) (|\x0;fail~1on7G8~1097|)))) (|\x0;fail~1on7G8~1097|))) (|\x0;fail~1on7G8~1097|)))))))))) (if (pair? |\x0;input~1on7G8~1087|) (let ((|\x0;temp~1on7G8~1123| (car |\x0;input~1on7G8~1087|))) (if (equal? |\x0;temp~1on7G8~1123| '"quote") (let ((|\x0;temp~1on7G8~1120| (cdr |\x0;input~1on7G8~1087|))) (if (pair? |\x0;temp~1on7G8~1120|) (let ((|\x0;temp~1on7G8~1122| (car |\x0;temp~1on7G8~1120|))) (if (null? |\x0;temp~1on7G8~1122|) (let ((|\x0;temp~1on7G8~1121| (cdr |\x0;temp~1on7G8~1120|))) (if (null? |\x0;temp~1on7G8~1121|) (if (null? |\x0;x~1on7G8~1084|) (begin (cons '"quote" (cons '() '()))) (if (null? (cdr |\x0;x~1on7G8~1084|)) (begin (car |\x0;x~1on7G8~1084|)) (begin (let ((|\x0;input~1on7G8~1115| |\x0;x~1on7G8~1084|)) (let ((|\x0;fail~1on7G8~1116| (lambda () (ex:invalid-form |\x0;input~1on7G8~1115|)))) (if (list? |\x0;input~1on7G8~1115|) (let ((|\x0;p~1on7G8~1117| |\x0;input~1on7G8~1115|)) (begin (cons '"append" |\x0;p~1on7G8~1117|))) (|\x0;fail~1on7G8~1116|))))))) (|\x0;fail~1on7G8~1088|))) (|\x0;fail~1on7G8~1088|))) (|\x0;fail~1on7G8~1088|))) (|\x0;fail~1on7G8~1088|))) (|\x0;fail~1on7G8~1088|)))))) (set! |\x0;quasilist*~1on7G8~857| (lambda (|\x0;x~1on7G8~1068| |\x0;y~1on7G8~1069|) ((lambda () ((lambda (|\x0;f~1on7G8~1075|) (set! |\x0;f~1on7G8~1075| (lambda (|\x0;x~1on7G8~1081|) (if (null? |\x0;x~1on7G8~1081|) |\x0;y~1on7G8~1069| (|\x0;quasicons~1on7G8~855| (car |\x0;x~1on7G8~1081|) (|\x0;f~1on7G8~1075| (cdr |\x0;x~1on7G8~1081|)))))) ((lambda () ((lambda (|\x0;x~1on7G8~1079|) (|\x0;f~1on7G8~1075| |\x0;x~1on7G8~1079|)) |\x0;x~1on7G8~1068|)))) ex:undefined))))) (set! |\x0;quasivector~1on7G8~858| (lambda (|\x0;x~1on7G8~993|) (let ((|\x0;input~1on7G8~995| |\x0;x~1on7G8~993|)) (let ((|\x0;fail~1on7G8~996| (lambda () (let ((|\x0;fail~1on7G8~997| (lambda () (ex:invalid-form |\x0;input~1on7G8~995|)))) ((lambda () ((lambda (|\x0;f~1on7G8~1003|) (set! |\x0;f~1on7G8~1003| (lambda (|\x0;y~1on7G8~1021| |\x0;k~1on7G8~1022|) (let ((|\x0;input~1on7G8~1024| |\x0;y~1on7G8~1021|)) (let ((|\x0;fail~1on7G8~1025| (lambda () (let ((|\x0;fail~1on7G8~1026| (lambda () (let ((|\x0;fail~1on7G8~1027| (lambda () (let ((|\x0;fail~1on7G8~1028| (lambda () (ex:invalid-form |\x0;input~1on7G8~1024|)))) (let ((|\x0;else~1on7G8~1029| |\x0;input~1on7G8~1024|)) (let ((|\x0;input~1on7G8~1034| |\x0;x~1on7G8~993|)) (let ((|\x0;fail~1on7G8~1035| (lambda () (ex:invalid-form |\x0;input~1on7G8~1034|)))) (let ((|\x0;temp~1on7G8~1036| |\x0;input~1on7G8~1034|)) (begin (cons '"list->vector" (cons |\x0;temp~1on7G8~1036| '()))))))))))) (if (pair? |\x0;input~1on7G8~1024|) (let ((|\x0;temp~1on7G8~1050| (car |\x0;input~1on7G8~1024|))) (if (equal? |\x0;temp~1on7G8~1050| '"list*") (let ((|\x0;temp~1on7G8~1045| (cdr |\x0;input~1on7G8~1024|))) (if (>= (ex:dotted-length |\x0;temp~1on7G8~1045|) 1) (let ((|\x0;temp~1on7G8~1049| (ex:dotted-butlast |\x0;temp~1on7G8~1045| 1))) (if (list? |\x0;temp~1on7G8~1049|) (let ((|\x0;y~1on7G8~1039| |\x0;temp~1on7G8~1049|)) (let ((|\x0;temp~1on7G8~1046| (ex:dotted-last |\x0;temp~1on7G8~1045| 1))) (if (pair? |\x0;temp~1on7G8~1046|) (let ((|\x0;temp~1on7G8~1048| (car |\x0;temp~1on7G8~1046|))) (let ((|\x0;z~1on7G8~1040| |\x0;temp~1on7G8~1048|)) (let ((|\x0;temp~1on7G8~1047| (cdr |\x0;temp~1on7G8~1046|))) (if (null? |\x0;temp~1on7G8~1047|) (|\x0;f~1on7G8~1003| |\x0;z~1on7G8~1040| (lambda (|\x0;ls~1on7G8~1043|) (|\x0;k~1on7G8~1022| (append |\x0;y~1on7G8~1039| |\x0;ls~1on7G8~1043|)))) (|\x0;fail~1on7G8~1027|))))) (|\x0;fail~1on7G8~1027|)))) (|\x0;fail~1on7G8~1027|))) (|\x0;fail~1on7G8~1027|))) (|\x0;fail~1on7G8~1027|))) (|\x0;fail~1on7G8~1027|)))))) (if (pair? |\x0;input~1on7G8~1024|) (let ((|\x0;temp~1on7G8~1054| (car |\x0;input~1on7G8~1024|))) (if (equal? |\x0;temp~1on7G8~1054| '"list") (let ((|\x0;temp~1on7G8~1053| (cdr |\x0;input~1on7G8~1024|))) (if (list? |\x0;temp~1on7G8~1053|) (let ((|\x0;y~1on7G8~1051| |\x0;temp~1on7G8~1053|)) (|\x0;k~1on7G8~1022| |\x0;y~1on7G8~1051|)) (|\x0;fail~1on7G8~1026|))) (|\x0;fail~1on7G8~1026|))) (|\x0;fail~1on7G8~1026|)))))) (if (pair? |\x0;input~1on7G8~1024|) (let ((|\x0;temp~1on7G8~1060| (car |\x0;input~1on7G8~1024|))) (if (equal? |\x0;temp~1on7G8~1060| '"quote") (let ((|\x0;temp~1on7G8~1057| (cdr |\x0;input~1on7G8~1024|))) (if (pair? |\x0;temp~1on7G8~1057|) (let ((|\x0;temp~1on7G8~1059| (car |\x0;temp~1on7G8~1057|))) (if (list? |\x0;temp~1on7G8~1059|) (let ((|\x0;y~1on7G8~1055| |\x0;temp~1on7G8~1059|)) (let ((|\x0;temp~1on7G8~1058| (cdr |\x0;temp~1on7G8~1057|))) (if (null? |\x0;temp~1on7G8~1058|) (|\x0;k~1on7G8~1022| (map (lambda (|\x0;y~1on7G8~1055|) (cons '"quote" (cons |\x0;y~1on7G8~1055| '()))) |\x0;y~1on7G8~1055|)) (|\x0;fail~1on7G8~1025|)))) (|\x0;fail~1on7G8~1025|))) (|\x0;fail~1on7G8~1025|))) (|\x0;fail~1on7G8~1025|))) (|\x0;fail~1on7G8~1025|)))))) ((lambda () ((lambda (|\x0;y~1on7G8~1007| |\x0;k~1on7G8~1008|) (|\x0;f~1on7G8~1003| |\x0;y~1on7G8~1007| |\x0;k~1on7G8~1008|)) |\x0;x~1on7G8~993| (lambda (|\x0;ls~1on7G8~1010|) (let ((|\x0;input~1on7G8~1015| |\x0;ls~1on7G8~1010|)) (let ((|\x0;fail~1on7G8~1016| (lambda () (ex:invalid-form |\x0;input~1on7G8~1015|)))) (if (list? |\x0;input~1on7G8~1015|) (let ((|\x0;temp~1on7G8~1017| |\x0;input~1on7G8~1015|)) (begin (cons '"vector" |\x0;temp~1on7G8~1017|))) (|\x0;fail~1on7G8~1016|))))))))) ex:undefined))))))) (if (pair? |\x0;input~1on7G8~995|) (let ((|\x0;temp~1on7G8~1066| (car |\x0;input~1on7G8~995|))) (if (equal? |\x0;temp~1on7G8~1066| '"quote") (let ((|\x0;temp~1on7G8~1063| (cdr |\x0;input~1on7G8~995|))) (if (pair? |\x0;temp~1on7G8~1063|) (let ((|\x0;temp~1on7G8~1065| (car |\x0;temp~1on7G8~1063|))) (if (list? |\x0;temp~1on7G8~1065|) (let ((|\x0;x~1on7G8~1061| |\x0;temp~1on7G8~1065|)) (let ((|\x0;temp~1on7G8~1064| (cdr |\x0;temp~1on7G8~1063|))) (if (null? |\x0;temp~1on7G8~1064|) (cons '"quote" (cons (list->vector |\x0;x~1on7G8~1061|) '())) (|\x0;fail~1on7G8~996|)))) (|\x0;fail~1on7G8~996|))) (|\x0;fail~1on7G8~996|))) (|\x0;fail~1on7G8~996|))) (|\x0;fail~1on7G8~996|)))))) (set! |\x0;emit~1on7G8~859| (lambda (|\x0;x~1on7G8~872|) (let ((|\x0;input~1on7G8~874| |\x0;x~1on7G8~872|)) (let ((|\x0;fail~1on7G8~875| (lambda () (let ((|\x0;fail~1on7G8~876| (lambda () (let ((|\x0;fail~1on7G8~877| (lambda () (let ((|\x0;fail~1on7G8~878| (lambda () (let ((|\x0;fail~1on7G8~879| (lambda () (let ((|\x0;fail~1on7G8~880| (lambda () (let ((|\x0;fail~1on7G8~881| (lambda () (ex:invalid-form |\x0;input~1on7G8~874|)))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~887| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~887| '"value") (let ((|\x0;temp~1on7G8~884| (cdr |\x0;input~1on7G8~874|))) (if (pair? |\x0;temp~1on7G8~884|) (let ((|\x0;temp~1on7G8~886| (car |\x0;temp~1on7G8~884|))) (let ((|\x0;x~1on7G8~882| |\x0;temp~1on7G8~886|)) (let ((|\x0;temp~1on7G8~885| (cdr |\x0;temp~1on7G8~884|))) (if (null? |\x0;temp~1on7G8~885|) |\x0;x~1on7G8~882| (|\x0;fail~1on7G8~881|))))) (|\x0;fail~1on7G8~881|))) (|\x0;fail~1on7G8~881|))) (|\x0;fail~1on7G8~881|)))))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~903| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~903| '"list->vector") (let ((|\x0;temp~1on7G8~900| (cdr |\x0;input~1on7G8~874|))) (if (pair? |\x0;temp~1on7G8~900|) (let ((|\x0;temp~1on7G8~902| (car |\x0;temp~1on7G8~900|))) (let ((|\x0;x~1on7G8~888| |\x0;temp~1on7G8~902|)) (let ((|\x0;temp~1on7G8~901| (cdr |\x0;temp~1on7G8~900|))) (if (null? |\x0;temp~1on7G8~901|) (let ((|\x0;input~1on7G8~893| (|\x0;emit~1on7G8~859| |\x0;x~1on7G8~888|))) (let ((|\x0;fail~1on7G8~895| (lambda () (ex:invalid-form |\x0;input~1on7G8~893|)))) (let ((|\x0;temp~1on7G8~896| |\x0;input~1on7G8~893|)) (begin (cons (ex:syntax-rename 'list->vector '() '(|\x0;env~1on7G8~899|) 0 '(core quasiquote)) (cons |\x0;temp~1on7G8~896| '())))))) (|\x0;fail~1on7G8~880|))))) (|\x0;fail~1on7G8~880|))) (|\x0;fail~1on7G8~880|))) (|\x0;fail~1on7G8~880|)))))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~917| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~917| '"vector") (let ((|\x0;temp~1on7G8~916| (cdr |\x0;input~1on7G8~874|))) (if (list? |\x0;temp~1on7G8~916|) (let ((|\x0;x~1on7G8~904| |\x0;temp~1on7G8~916|)) (let ((|\x0;input~1on7G8~909| (map |\x0;emit~1on7G8~859| |\x0;x~1on7G8~904|))) (let ((|\x0;fail~1on7G8~911| (lambda () (ex:invalid-form |\x0;input~1on7G8~909|)))) (if (list? |\x0;input~1on7G8~909|) (let ((|\x0;temp~1on7G8~912| |\x0;input~1on7G8~909|)) (begin (cons (ex:syntax-rename 'vector '() '(|\x0;env~1on7G8~915|) 0 '(core quasiquote)) |\x0;temp~1on7G8~912|))) (|\x0;fail~1on7G8~911|))))) (|\x0;fail~1on7G8~879|))) (|\x0;fail~1on7G8~879|))) (|\x0;fail~1on7G8~879|)))))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~931| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~931| '"append") (let ((|\x0;temp~1on7G8~930| (cdr |\x0;input~1on7G8~874|))) (if (list? |\x0;temp~1on7G8~930|) (let ((|\x0;x~1on7G8~918| |\x0;temp~1on7G8~930|)) (let ((|\x0;input~1on7G8~923| (map |\x0;emit~1on7G8~859| |\x0;x~1on7G8~918|))) (let ((|\x0;fail~1on7G8~925| (lambda () (ex:invalid-form |\x0;input~1on7G8~923|)))) (if (list? |\x0;input~1on7G8~923|) (let ((|\x0;temp~1on7G8~926| |\x0;input~1on7G8~923|)) (begin (cons (ex:syntax-rename 'append '() '(|\x0;env~1on7G8~929|) 0 '(core quasiquote)) |\x0;temp~1on7G8~926|))) (|\x0;fail~1on7G8~925|))))) (|\x0;fail~1on7G8~878|))) (|\x0;fail~1on7G8~878|))) (|\x0;fail~1on7G8~878|)))))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~970| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~970| '"list*") (let ((|\x0;temp~1on7G8~965| (cdr |\x0;input~1on7G8~874|))) (if (>= (ex:dotted-length |\x0;temp~1on7G8~965|) 1) (let ((|\x0;temp~1on7G8~969| (ex:dotted-butlast |\x0;temp~1on7G8~965| 1))) (if (list? |\x0;temp~1on7G8~969|) (let ((|\x0;x~1on7G8~932| |\x0;temp~1on7G8~969|)) (let ((|\x0;temp~1on7G8~966| (ex:dotted-last |\x0;temp~1on7G8~965| 1))) (if (pair? |\x0;temp~1on7G8~966|) (let ((|\x0;temp~1on7G8~968| (car |\x0;temp~1on7G8~966|))) (let ((|\x0;y~1on7G8~933| |\x0;temp~1on7G8~968|)) (let ((|\x0;temp~1on7G8~967| (cdr |\x0;temp~1on7G8~966|))) (if (null? |\x0;temp~1on7G8~967|) ((lambda () ((lambda (|\x0;f~1on7G8~939|) (set! |\x0;f~1on7G8~939| (lambda (|\x0;x*~1on7G8~946|) (if (null? |\x0;x*~1on7G8~946|) (|\x0;emit~1on7G8~859| |\x0;y~1on7G8~933|) (let ((|\x0;input~1on7G8~954| (list (|\x0;emit~1on7G8~859| (car |\x0;x*~1on7G8~946|)) (|\x0;f~1on7G8~939| (cdr |\x0;x*~1on7G8~946|))))) (let ((|\x0;fail~1on7G8~955| (lambda () (ex:invalid-form |\x0;input~1on7G8~954|)))) (if (pair? |\x0;input~1on7G8~954|) (let ((|\x0;temp~1on7G8~964| (car |\x0;input~1on7G8~954|))) (let ((|\x0;temp~1on7G8~956| |\x0;temp~1on7G8~964|)) (let ((|\x0;temp~1on7G8~961| (cdr |\x0;input~1on7G8~954|))) (if (pair? |\x0;temp~1on7G8~961|) (let ((|\x0;temp~1on7G8~963| (car |\x0;temp~1on7G8~961|))) (let ((|\x0;temp~1on7G8~957| |\x0;temp~1on7G8~963|)) (let ((|\x0;temp~1on7G8~962| (cdr |\x0;temp~1on7G8~961|))) (if (null? |\x0;temp~1on7G8~962|) (begin (cons (ex:syntax-rename 'cons '() '(|\x0;env~1on7G8~960|) 0 '(core quasiquote)) (cons |\x0;temp~1on7G8~956| (cons |\x0;temp~1on7G8~957| '())))) (|\x0;fail~1on7G8~955|))))) (|\x0;fail~1on7G8~955|))))) (|\x0;fail~1on7G8~955|))))))) ((lambda () ((lambda (|\x0;x*~1on7G8~943|) (|\x0;f~1on7G8~939| |\x0;x*~1on7G8~943|)) |\x0;x~1on7G8~932|)))) ex:undefined))) (|\x0;fail~1on7G8~877|))))) (|\x0;fail~1on7G8~877|)))) (|\x0;fail~1on7G8~877|))) (|\x0;fail~1on7G8~877|))) (|\x0;fail~1on7G8~877|))) (|\x0;fail~1on7G8~877|)))))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~984| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~984| '"list") (let ((|\x0;temp~1on7G8~983| (cdr |\x0;input~1on7G8~874|))) (if (list? |\x0;temp~1on7G8~983|) (let ((|\x0;x~1on7G8~971| |\x0;temp~1on7G8~983|)) (let ((|\x0;input~1on7G8~976| (map |\x0;emit~1on7G8~859| |\x0;x~1on7G8~971|))) (let ((|\x0;fail~1on7G8~978| (lambda () (ex:invalid-form |\x0;input~1on7G8~976|)))) (if (list? |\x0;input~1on7G8~976|) (let ((|\x0;temp~1on7G8~979| |\x0;input~1on7G8~976|)) (begin (cons (ex:syntax-rename 'list '() '(|\x0;env~1on7G8~982|) 0 '(core quasiquote)) |\x0;temp~1on7G8~979|))) (|\x0;fail~1on7G8~978|))))) (|\x0;fail~1on7G8~876|))) (|\x0;fail~1on7G8~876|))) (|\x0;fail~1on7G8~876|)))))) (if (pair? |\x0;input~1on7G8~874|) (let ((|\x0;temp~1on7G8~991| (car |\x0;input~1on7G8~874|))) (if (equal? |\x0;temp~1on7G8~991| '"quote") (let ((|\x0;temp~1on7G8~988| (cdr |\x0;input~1on7G8~874|))) (if (pair? |\x0;temp~1on7G8~988|) (let ((|\x0;temp~1on7G8~990| (car |\x0;temp~1on7G8~988|))) (let ((|\x0;x~1on7G8~985| |\x0;temp~1on7G8~990|)) (let ((|\x0;temp~1on7G8~989| (cdr |\x0;temp~1on7G8~988|))) (if (null? |\x0;temp~1on7G8~989|) (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~987|) 0 '(core quasiquote)) (cons |\x0;x~1on7G8~985| '())) (|\x0;fail~1on7G8~875|))))) (|\x0;fail~1on7G8~875|))) (|\x0;fail~1on7G8~875|))) (|\x0;fail~1on7G8~875|)))))) (lambda (|\x0;x~1on7G8~861|) (let ((|\x0;input~1on7G8~863| |\x0;x~1on7G8~861|)) (let ((|\x0;fail~1on7G8~864| (lambda () (ex:invalid-form |\x0;input~1on7G8~863|)))) (if (pair? |\x0;input~1on7G8~863|) (let ((|\x0;temp~1on7G8~870| (car |\x0;input~1on7G8~863|))) (let ((|\x0;temp~1on7G8~867| (cdr |\x0;input~1on7G8~863|))) (if (pair? |\x0;temp~1on7G8~867|) (let ((|\x0;temp~1on7G8~869| (car |\x0;temp~1on7G8~867|))) (let ((|\x0;e~1on7G8~865| |\x0;temp~1on7G8~869|)) (let ((|\x0;temp~1on7G8~868| (cdr |\x0;temp~1on7G8~867|))) (if (null? |\x0;temp~1on7G8~868|) (|\x0;emit~1on7G8~859| (|\x0;quasi~1on7G8~853| |\x0;e~1on7G8~865| 0)) (|\x0;fail~1on7G8~864|))))) (|\x0;fail~1on7G8~864|)))) (|\x0;fail~1on7G8~864|)))))) ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined ex:undefined)))) (ex:register-macro! '|\x0;unquote~1on7G8~1279| (lambda (|\x0;e~1on7G8~1281|) (ex:syntax-violation 'unquote "Invalid expression" |\x0;e~1on7G8~1281|))) (ex:register-macro! '|\x0;unquote-splicing~1on7G8~1283| (lambda (|\x0;e~1on7G8~1285|) (ex:syntax-violation 'unquote-splicing "Invalid expression" |\x0;e~1on7G8~1285|))) (values)) (lambda () (values)) '|\x0;build~1on7G8~1287|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(core let-values) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~1455| 0 1 2 3) (|\x0;env~1on7G8~1442| 4 1 2 3) (|\x0;env~1on7G8~1421| 5 6 7 3) (|\x0;env~1on7G8~1405| 8 6 7 3) (|\x0;env~1on7G8~1384| 9 6 7 3) (|\x0;env~1on7G8~1360| 10 6 7 3) (|\x0;env~1on7G8~1334| 11 6 7 3) (|\x0;env~1on7G8~1308| 12 6 7 3)) (12 (((dummy |\x0;c~1on7G8~1289|) . #f) ((?a) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (11 (((dummy |\x0;c~1on7G8~1289|) . #f) ((?a) . #f) ((?b) . #f) ((?e0) . #f) ((?arg) . #f) ((?bindings) . #f) ((?tmp) . #f) ((?body) . #f))) (10 (((dummy |\x0;c~1on7G8~1289|) . #f) ((?e0) . #f) ((?args) . #f) ((?bindings) . #f) ((?tmps) . #f) ((?body) . #f))) (9 (((dummy |\x0;c~1on7G8~1289|) . #f) ((?b0) . #f) ((?e0) . #f) ((?binding) . #f) ((?tmps) . #f) ((?body) . #f))) (8 (((dummy |\x0;c~1on7G8~1289|) . #f) ((?tmps) . #f) ((?body) . #f))) (7 (((x |\x0;c~1on7G8~1289|) variable |\x0;x~1on7G8~1291| (0) #f (core let-values)))) (6 ()) (5 (((dummy |\x0;c~1on7G8~1289|) . #f) ((?binding) . #f) ((?body0) . #f) ((?body1) . #f))) (4 (((dummy |\x0;c~1on7G8~1429|) . #f) ((?binding0) . #f) ((?binding1) . #f) ((?body0) . #f) ((?body1) . #f))) (3 (((let*-values) macro |\x0;let*-values~1on7G8~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1on7G8~1288| (0) #f (core let-values)) ((undefined) variable ex:undefined (1 0) #f ()) ((eval) variable ex:eval (1 0) #f ()) ((environment-bindings) variable ex:environment-bindings (1 0) #f ()) ((environment) variable ex:environment (1 0) #f ()) ((syntax-violation) variable ex:syntax-violation (1 0) #f ()) ((syntax->datum) variable ex:syntax->datum (1 0) #f ()) ((datum->syntax) variable ex:datum->syntax (1 0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (1 0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (1 0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (1 0) #f ()) ((identifier?) variable ex:identifier? (1 0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (1 0) #f ()) ((syntax-case) macro syntax-case (1 0) #f ()) ((syntax) macro syntax (1 0) #f ()) ((...) macro ... (1 0) #f ()) ((_) macro _ (1 0) #f ()) ((letrec-syntax) macro letrec-syntax (1 0) #f ()) ((let-syntax) macro let-syntax (1 0) #f ()) ((define-syntax) macro define-syntax (1 0) #f ()) ((define) macro define (1 0) #f ()) ((or) macro or (1 0) #f ()) ((and) macro and (1 0) #f ()) ((set!) macro set! (1 0) #f ()) ((quote) macro quote (1 0) #f ()) ((lambda) macro lambda (1 0) #f ()) ((if) macro if (1 0) #f ()) ((begin) macro begin (1 0) #f ()) ((r7rs:syntax-error) macro |\x0;syntax-error~1on7G8~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1on7G8~58| (1) #f (core syntax-rules)) ((letrec*) macro |\x0;letrec*~1on7G8~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1on7G8~192| (0) #f (core let)) ((let) macro |\x0;let~1on7G8~144| (0) #f (core let)) ((call-with-values) variable call-with-values (0) #f ()))) (2 (((x |\x0;c~1on7G8~1429|) variable |\x0;x~1on7G8~1431| (0) #f (core let-values)))) (1 ()) (0 (((dummy |\x0;c~1on7G8~1429|) . #f) ((?body0) . #f) ((?body1) . #f)))))) '((let-values macro |\x0;let-values~1on7G8~1288| (0) #f (core let-values)) (let*-values macro |\x0;let*-values~1on7G8~1428| (0) #f (core let-values))) '(((core let) 0) ((core syntax-rules) 1) ((core primitives) 1 0)) '(|\x0;build~1on7G8~240| |\x0;build~1on7G8~143| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;let-values~1on7G8~1288| (lambda (|\x0;x~1on7G8~1291|) (let ((|\x0;input~1on7G8~1293| |\x0;x~1on7G8~1291|)) (let ((|\x0;fail~1on7G8~1294| (lambda () (let ((|\x0;fail~1on7G8~1295| (lambda () (let ((|\x0;fail~1on7G8~1296| (lambda () (let ((|\x0;fail~1on7G8~1297| (lambda () (let ((|\x0;fail~1on7G8~1298| (lambda () (let ((|\x0;fail~1on7G8~1299| (lambda () (ex:invalid-form |\x0;input~1on7G8~1293|)))) (if (pair? |\x0;input~1on7G8~1293|) (let ((|\x0;temp~1on7G8~1324| (car |\x0;input~1on7G8~1293|))) (let ((|\x0;dummy~1on7G8~1300| |\x0;temp~1on7G8~1324|)) (let ((|\x0;temp~1on7G8~1309| (cdr |\x0;input~1on7G8~1293|))) (if (pair? |\x0;temp~1on7G8~1309|) (let ((|\x0;temp~1on7G8~1323| (car |\x0;temp~1on7G8~1309|))) (if (equal? |\x0;temp~1on7G8~1323| '"mktmp") (let ((|\x0;temp~1on7G8~1310| (cdr |\x0;temp~1on7G8~1309|))) (if (pair? |\x0;temp~1on7G8~1310|) (let ((|\x0;temp~1on7G8~1322| (car |\x0;temp~1on7G8~1310|))) (let ((|\x0;?a~1on7G8~1301| |\x0;temp~1on7G8~1322|)) (let ((|\x0;temp~1on7G8~1311| (cdr |\x0;temp~1on7G8~1310|))) (if (pair? |\x0;temp~1on7G8~1311|) (let ((|\x0;temp~1on7G8~1321| (car |\x0;temp~1on7G8~1311|))) (let ((|\x0;?e0~1on7G8~1302| |\x0;temp~1on7G8~1321|)) (let ((|\x0;temp~1on7G8~1312| (cdr |\x0;temp~1on7G8~1311|))) (if (pair? |\x0;temp~1on7G8~1312|) (let ((|\x0;temp~1on7G8~1320| (car |\x0;temp~1on7G8~1312|))) (if (list? |\x0;temp~1on7G8~1320|) (let ((|\x0;?arg~1on7G8~1303| |\x0;temp~1on7G8~1320|)) (let ((|\x0;temp~1on7G8~1313| (cdr |\x0;temp~1on7G8~1312|))) (if (pair? |\x0;temp~1on7G8~1313|) (let ((|\x0;temp~1on7G8~1319| (car |\x0;temp~1on7G8~1313|))) (let ((|\x0;?bindings~1on7G8~1304| |\x0;temp~1on7G8~1319|)) (let ((|\x0;temp~1on7G8~1314| (cdr |\x0;temp~1on7G8~1313|))) (if (pair? |\x0;temp~1on7G8~1314|) (let ((|\x0;temp~1on7G8~1318| (car |\x0;temp~1on7G8~1314|))) (if (list? |\x0;temp~1on7G8~1318|) (let ((|\x0;?tmp~1on7G8~1305| |\x0;temp~1on7G8~1318|)) (let ((|\x0;temp~1on7G8~1315| (cdr |\x0;temp~1on7G8~1314|))) (if (pair? |\x0;temp~1on7G8~1315|) (let ((|\x0;temp~1on7G8~1317| (car |\x0;temp~1on7G8~1315|))) (let ((|\x0;?body~1on7G8~1306| |\x0;temp~1on7G8~1317|)) (let ((|\x0;temp~1on7G8~1316| (cdr |\x0;temp~1on7G8~1315|))) (if (null? |\x0;temp~1on7G8~1316|) (cons (ex:syntax-rename 'call-with-values '() '(|\x0;env~1on7G8~1308|) 0 '(core let-values)) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~1308|) 0 '(core let-values)) (cons '() (cons |\x0;?e0~1on7G8~1302| '()))) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~1308|) 0 '(core let-values)) (cons (append |\x0;?arg~1on7G8~1303| (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~1308|) 0 '(core let-values))) (cons (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1on7G8~1308|) 0 '(core let-values)) (cons '"bind" (cons |\x0;?bindings~1on7G8~1304| (cons (append |\x0;?tmp~1on7G8~1305| (cons (cons |\x0;?a~1on7G8~1301| (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~1308|) 0 '(core let-values)) '())) '())) (cons |\x0;?body~1on7G8~1306| '()))))) '()))) '()))) (|\x0;fail~1on7G8~1299|))))) (|\x0;fail~1on7G8~1299|)))) (|\x0;fail~1on7G8~1299|))) (|\x0;fail~1on7G8~1299|))))) (|\x0;fail~1on7G8~1299|)))) (|\x0;fail~1on7G8~1299|))) (|\x0;fail~1on7G8~1299|))))) (|\x0;fail~1on7G8~1299|))))) (|\x0;fail~1on7G8~1299|))) (|\x0;fail~1on7G8~1299|))) (|\x0;fail~1on7G8~1299|))))) (|\x0;fail~1on7G8~1299|)))))) (if (pair? |\x0;input~1on7G8~1293|) (let ((|\x0;temp~1on7G8~1352| (car |\x0;input~1on7G8~1293|))) (let ((|\x0;dummy~1on7G8~1325| |\x0;temp~1on7G8~1352|)) (let ((|\x0;temp~1on7G8~1335| (cdr |\x0;input~1on7G8~1293|))) (if (pair? |\x0;temp~1on7G8~1335|) (let ((|\x0;temp~1on7G8~1351| (car |\x0;temp~1on7G8~1335|))) (if (equal? |\x0;temp~1on7G8~1351| '"mktmp") (let ((|\x0;temp~1on7G8~1336| (cdr |\x0;temp~1on7G8~1335|))) (if (pair? |\x0;temp~1on7G8~1336|) (let ((|\x0;temp~1on7G8~1348| (car |\x0;temp~1on7G8~1336|))) (if (pair? |\x0;temp~1on7G8~1348|) (let ((|\x0;temp~1on7G8~1350| (car |\x0;temp~1on7G8~1348|))) (let ((|\x0;?a~1on7G8~1326| |\x0;temp~1on7G8~1350|)) (let ((|\x0;temp~1on7G8~1349| (cdr |\x0;temp~1on7G8~1348|))) (let ((|\x0;?b~1on7G8~1327| |\x0;temp~1on7G8~1349|)) (let ((|\x0;temp~1on7G8~1337| (cdr |\x0;temp~1on7G8~1336|))) (if (pair? |\x0;temp~1on7G8~1337|) (let ((|\x0;temp~1on7G8~1347| (car |\x0;temp~1on7G8~1337|))) (let ((|\x0;?e0~1on7G8~1328| |\x0;temp~1on7G8~1347|)) (let ((|\x0;temp~1on7G8~1338| (cdr |\x0;temp~1on7G8~1337|))) (if (pair? |\x0;temp~1on7G8~1338|) (let ((|\x0;temp~1on7G8~1346| (car |\x0;temp~1on7G8~1338|))) (if (list? |\x0;temp~1on7G8~1346|) (let ((|\x0;?arg~1on7G8~1329| |\x0;temp~1on7G8~1346|)) (let ((|\x0;temp~1on7G8~1339| (cdr |\x0;temp~1on7G8~1338|))) (if (pair? |\x0;temp~1on7G8~1339|) (let ((|\x0;temp~1on7G8~1345| (car |\x0;temp~1on7G8~1339|))) (let ((|\x0;?bindings~1on7G8~1330| |\x0;temp~1on7G8~1345|)) (let ((|\x0;temp~1on7G8~1340| (cdr |\x0;temp~1on7G8~1339|))) (if (pair? |\x0;temp~1on7G8~1340|) (let ((|\x0;temp~1on7G8~1344| (car |\x0;temp~1on7G8~1340|))) (if (list? |\x0;temp~1on7G8~1344|) (let ((|\x0;?tmp~1on7G8~1331| |\x0;temp~1on7G8~1344|)) (let ((|\x0;temp~1on7G8~1341| (cdr |\x0;temp~1on7G8~1340|))) (if (pair? |\x0;temp~1on7G8~1341|) (let ((|\x0;temp~1on7G8~1343| (car |\x0;temp~1on7G8~1341|))) (let ((|\x0;?body~1on7G8~1332| |\x0;temp~1on7G8~1343|)) (let ((|\x0;temp~1on7G8~1342| (cdr |\x0;temp~1on7G8~1341|))) (if (null? |\x0;temp~1on7G8~1342|) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1on7G8~1334|) 0 '(core let-values)) (cons '"mktmp" (cons |\x0;?b~1on7G8~1327| (cons |\x0;?e0~1on7G8~1328| (cons (append |\x0;?arg~1on7G8~1329| (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~1334|) 0 '(core let-values)) '())) (cons |\x0;?bindings~1on7G8~1330| (cons (append |\x0;?tmp~1on7G8~1331| (cons (cons |\x0;?a~1on7G8~1326| (cons (ex:syntax-rename 'x '() '(|\x0;env~1on7G8~1334|) 0 '(core let-values)) '())) '())) (cons |\x0;?body~1on7G8~1332| '())))))))) (|\x0;fail~1on7G8~1298|))))) (|\x0;fail~1on7G8~1298|)))) (|\x0;fail~1on7G8~1298|))) (|\x0;fail~1on7G8~1298|))))) (|\x0;fail~1on7G8~1298|)))) (|\x0;fail~1on7G8~1298|))) (|\x0;fail~1on7G8~1298|))))) (|\x0;fail~1on7G8~1298|))))))) (|\x0;fail~1on7G8~1298|))) (|\x0;fail~1on7G8~1298|))) (|\x0;fail~1on7G8~1298|))) (|\x0;fail~1on7G8~1298|))))) (|\x0;fail~1on7G8~1298|)))))) (if (pair? |\x0;input~1on7G8~1293|) (let ((|\x0;temp~1on7G8~1376| (car |\x0;input~1on7G8~1293|))) (let ((|\x0;dummy~1on7G8~1353| |\x0;temp~1on7G8~1376|)) (let ((|\x0;temp~1on7G8~1361| (cdr |\x0;input~1on7G8~1293|))) (if (pair? |\x0;temp~1on7G8~1361|) (let ((|\x0;temp~1on7G8~1375| (car |\x0;temp~1on7G8~1361|))) (if (equal? |\x0;temp~1on7G8~1375| '"mktmp") (let ((|\x0;temp~1on7G8~1362| (cdr |\x0;temp~1on7G8~1361|))) (if (pair? |\x0;temp~1on7G8~1362|) (let ((|\x0;temp~1on7G8~1374| (car |\x0;temp~1on7G8~1362|))) (if (null? |\x0;temp~1on7G8~1374|) (let ((|\x0;temp~1on7G8~1363| (cdr |\x0;temp~1on7G8~1362|))) (if (pair? |\x0;temp~1on7G8~1363|) (let ((|\x0;temp~1on7G8~1373| (car |\x0;temp~1on7G8~1363|))) (let ((|\x0;?e0~1on7G8~1354| |\x0;temp~1on7G8~1373|)) (let ((|\x0;temp~1on7G8~1364| (cdr |\x0;temp~1on7G8~1363|))) (if (pair? |\x0;temp~1on7G8~1364|) (let ((|\x0;temp~1on7G8~1372| (car |\x0;temp~1on7G8~1364|))) (let ((|\x0;?args~1on7G8~1355| |\x0;temp~1on7G8~1372|)) (let ((|\x0;temp~1on7G8~1365| (cdr |\x0;temp~1on7G8~1364|))) (if (pair? |\x0;temp~1on7G8~1365|) (let ((|\x0;temp~1on7G8~1371| (car |\x0;temp~1on7G8~1365|))) (let ((|\x0;?bindings~1on7G8~1356| |\x0;temp~1on7G8~1371|)) (let ((|\x0;temp~1on7G8~1366| (cdr |\x0;temp~1on7G8~1365|))) (if (pair? |\x0;temp~1on7G8~1366|) (let ((|\x0;temp~1on7G8~1370| (car |\x0;temp~1on7G8~1366|))) (let ((|\x0;?tmps~1on7G8~1357| |\x0;temp~1on7G8~1370|)) (let ((|\x0;temp~1on7G8~1367| (cdr |\x0;temp~1on7G8~1366|))) (if (pair? |\x0;temp~1on7G8~1367|) (let ((|\x0;temp~1on7G8~1369| (car |\x0;temp~1on7G8~1367|))) (let ((|\x0;?body~1on7G8~1358| |\x0;temp~1on7G8~1369|)) (let ((|\x0;temp~1on7G8~1368| (cdr |\x0;temp~1on7G8~1367|))) (if (null? |\x0;temp~1on7G8~1368|) (cons (ex:syntax-rename 'call-with-values '() '(|\x0;env~1on7G8~1360|) 0 '(core let-values)) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~1360|) 0 '(core let-values)) (cons '() (cons |\x0;?e0~1on7G8~1354| '()))) (cons (cons (ex:syntax-rename 'lambda '() '(|\x0;env~1on7G8~1360|) 0 '(core let-values)) (cons |\x0;?args~1on7G8~1355| (cons (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1on7G8~1360|) 0 '(core let-values)) (cons '"bind" (cons |\x0;?bindings~1on7G8~1356| (cons |\x0;?tmps~1on7G8~1357| (cons |\x0;?body~1on7G8~1358| '()))))) '()))) '()))) (|\x0;fail~1on7G8~1297|))))) (|\x0;fail~1on7G8~1297|))))) (|\x0;fail~1on7G8~1297|))))) (|\x0;fail~1on7G8~1297|))))) (|\x0;fail~1on7G8~1297|))))) (|\x0;fail~1on7G8~1297|))) (|\x0;fail~1on7G8~1297|))) (|\x0;fail~1on7G8~1297|))) (|\x0;fail~1on7G8~1297|))) (|\x0;fail~1on7G8~1297|))))) (|\x0;fail~1on7G8~1297|)))))) (if (pair? |\x0;input~1on7G8~1293|) (let ((|\x0;temp~1on7G8~1400| (car |\x0;input~1on7G8~1293|))) (let ((|\x0;dummy~1on7G8~1377| |\x0;temp~1on7G8~1400|)) (let ((|\x0;temp~1on7G8~1385| (cdr |\x0;input~1on7G8~1293|))) (if (pair? |\x0;temp~1on7G8~1385|) (let ((|\x0;temp~1on7G8~1399| (car |\x0;temp~1on7G8~1385|))) (if (equal? |\x0;temp~1on7G8~1399| '"bind") (let ((|\x0;temp~1on7G8~1386| (cdr |\x0;temp~1on7G8~1385|))) (if (pair? |\x0;temp~1on7G8~1386|) (let ((|\x0;temp~1on7G8~1392| (car |\x0;temp~1on7G8~1386|))) (if (pair? |\x0;temp~1on7G8~1392|) (let ((|\x0;temp~1on7G8~1394| (car |\x0;temp~1on7G8~1392|))) (if (pair? |\x0;temp~1on7G8~1394|) (let ((|\x0;temp~1on7G8~1398| (car |\x0;temp~1on7G8~1394|))) (let ((|\x0;?b0~1on7G8~1378| |\x0;temp~1on7G8~1398|)) (let ((|\x0;temp~1on7G8~1395| (cdr |\x0;temp~1on7G8~1394|))) (if (pair? |\x0;temp~1on7G8~1395|) (let ((|\x0;temp~1on7G8~1397| (car |\x0;temp~1on7G8~1395|))) (let ((|\x0;?e0~1on7G8~1379| |\x0;temp~1on7G8~1397|)) (let ((|\x0;temp~1on7G8~1396| (cdr |\x0;temp~1on7G8~1395|))) (if (null? |\x0;temp~1on7G8~1396|) (let ((|\x0;temp~1on7G8~1393| (cdr |\x0;temp~1on7G8~1392|))) (if (list? |\x0;temp~1on7G8~1393|) (let ((|\x0;?binding~1on7G8~1380| |\x0;temp~1on7G8~1393|)) (let ((|\x0;temp~1on7G8~1387| (cdr |\x0;temp~1on7G8~1386|))) (if (pair? |\x0;temp~1on7G8~1387|) (let ((|\x0;temp~1on7G8~1391| (car |\x0;temp~1on7G8~1387|))) (let ((|\x0;?tmps~1on7G8~1381| |\x0;temp~1on7G8~1391|)) (let ((|\x0;temp~1on7G8~1388| (cdr |\x0;temp~1on7G8~1387|))) (if (pair? |\x0;temp~1on7G8~1388|) (let ((|\x0;temp~1on7G8~1390| (car |\x0;temp~1on7G8~1388|))) (let ((|\x0;?body~1on7G8~1382| |\x0;temp~1on7G8~1390|)) (let ((|\x0;temp~1on7G8~1389| (cdr |\x0;temp~1on7G8~1388|))) (if (null? |\x0;temp~1on7G8~1389|) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1on7G8~1384|) 0 '(core let-values)) (cons '"mktmp" (cons |\x0;?b0~1on7G8~1378| (cons |\x0;?e0~1on7G8~1379| (cons '() (cons |\x0;?binding~1on7G8~1380| (cons |\x0;?tmps~1on7G8~1381| (cons |\x0;?body~1on7G8~1382| '())))))))) (|\x0;fail~1on7G8~1296|))))) (|\x0;fail~1on7G8~1296|))))) (|\x0;fail~1on7G8~1296|)))) (|\x0;fail~1on7G8~1296|))) (|\x0;fail~1on7G8~1296|))))) (|\x0;fail~1on7G8~1296|))))) (|\x0;fail~1on7G8~1296|))) (|\x0;fail~1on7G8~1296|))) (|\x0;fail~1on7G8~1296|))) (|\x0;fail~1on7G8~1296|))) (|\x0;fail~1on7G8~1296|))))) (|\x0;fail~1on7G8~1296|)))))) (if (pair? |\x0;input~1on7G8~1293|) (let ((|\x0;temp~1on7G8~1415| (car |\x0;input~1on7G8~1293|))) (let ((|\x0;dummy~1on7G8~1401| |\x0;temp~1on7G8~1415|)) (let ((|\x0;temp~1on7G8~1406| (cdr |\x0;input~1on7G8~1293|))) (if (pair? |\x0;temp~1on7G8~1406|) (let ((|\x0;temp~1on7G8~1414| (car |\x0;temp~1on7G8~1406|))) (if (equal? |\x0;temp~1on7G8~1414| '"bind") (let ((|\x0;temp~1on7G8~1407| (cdr |\x0;temp~1on7G8~1406|))) (if (pair? |\x0;temp~1on7G8~1407|) (let ((|\x0;temp~1on7G8~1413| (car |\x0;temp~1on7G8~1407|))) (if (null? |\x0;temp~1on7G8~1413|) (let ((|\x0;temp~1on7G8~1408| (cdr |\x0;temp~1on7G8~1407|))) (if (pair? |\x0;temp~1on7G8~1408|) (let ((|\x0;temp~1on7G8~1412| (car |\x0;temp~1on7G8~1408|))) (let ((|\x0;?tmps~1on7G8~1402| |\x0;temp~1on7G8~1412|)) (let ((|\x0;temp~1on7G8~1409| (cdr |\x0;temp~1on7G8~1408|))) (if (pair? |\x0;temp~1on7G8~1409|) (let ((|\x0;temp~1on7G8~1411| (car |\x0;temp~1on7G8~1409|))) (let ((|\x0;?body~1on7G8~1403| |\x0;temp~1on7G8~1411|)) (let ((|\x0;temp~1on7G8~1410| (cdr |\x0;temp~1on7G8~1409|))) (if (null? |\x0;temp~1on7G8~1410|) (cons (ex:syntax-rename 'let '() '(|\x0;env~1on7G8~1405|) 0 '(core let-values)) (cons |\x0;?tmps~1on7G8~1402| (cons |\x0;?body~1on7G8~1403| '()))) (|\x0;fail~1on7G8~1295|))))) (|\x0;fail~1on7G8~1295|))))) (|\x0;fail~1on7G8~1295|))) (|\x0;fail~1on7G8~1295|))) (|\x0;fail~1on7G8~1295|))) (|\x0;fail~1on7G8~1295|))) (|\x0;fail~1on7G8~1295|))))) (|\x0;fail~1on7G8~1295|)))))) (if (pair? |\x0;input~1on7G8~1293|) (let ((|\x0;temp~1on7G8~1427| (car |\x0;input~1on7G8~1293|))) (let ((|\x0;dummy~1on7G8~1416| |\x0;temp~1on7G8~1427|)) (let ((|\x0;temp~1on7G8~1422| (cdr |\x0;input~1on7G8~1293|))) (if (pair? |\x0;temp~1on7G8~1422|) (let ((|\x0;temp~1on7G8~1426| (car |\x0;temp~1on7G8~1422|))) (if (list? |\x0;temp~1on7G8~1426|) (let ((|\x0;?binding~1on7G8~1417| |\x0;temp~1on7G8~1426|)) (let ((|\x0;temp~1on7G8~1423| (cdr |\x0;temp~1on7G8~1422|))) (if (pair? |\x0;temp~1on7G8~1423|) (let ((|\x0;temp~1on7G8~1425| (car |\x0;temp~1on7G8~1423|))) (let ((|\x0;?body0~1on7G8~1418| |\x0;temp~1on7G8~1425|)) (let ((|\x0;temp~1on7G8~1424| (cdr |\x0;temp~1on7G8~1423|))) (if (list? |\x0;temp~1on7G8~1424|) (let ((|\x0;?body1~1on7G8~1419| |\x0;temp~1on7G8~1424|)) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1on7G8~1421|) 0 '(core let-values)) (cons '"bind" (cons |\x0;?binding~1on7G8~1417| (cons '() (cons (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~1421|) 0 '(core let-values)) (cons |\x0;?body0~1on7G8~1418| |\x0;?body1~1on7G8~1419|)) '())))))) (|\x0;fail~1on7G8~1294|))))) (|\x0;fail~1on7G8~1294|)))) (|\x0;fail~1on7G8~1294|))) (|\x0;fail~1on7G8~1294|))))) (|\x0;fail~1on7G8~1294|)))))) (ex:register-macro! '|\x0;let*-values~1on7G8~1428| (lambda (|\x0;x~1on7G8~1431|) (let ((|\x0;input~1on7G8~1433| |\x0;x~1on7G8~1431|)) (let ((|\x0;fail~1on7G8~1434| (lambda () (let ((|\x0;fail~1on7G8~1435| (lambda () (ex:invalid-form |\x0;input~1on7G8~1433|)))) (if (pair? |\x0;input~1on7G8~1433|) (let ((|\x0;temp~1on7G8~1450| (car |\x0;input~1on7G8~1433|))) (let ((|\x0;dummy~1on7G8~1436| |\x0;temp~1on7G8~1450|)) (let ((|\x0;temp~1on7G8~1443| (cdr |\x0;input~1on7G8~1433|))) (if (pair? |\x0;temp~1on7G8~1443|) (let ((|\x0;temp~1on7G8~1447| (car |\x0;temp~1on7G8~1443|))) (if (pair? |\x0;temp~1on7G8~1447|) (let ((|\x0;temp~1on7G8~1449| (car |\x0;temp~1on7G8~1447|))) (let ((|\x0;?binding0~1on7G8~1437| |\x0;temp~1on7G8~1449|)) (let ((|\x0;temp~1on7G8~1448| (cdr |\x0;temp~1on7G8~1447|))) (if (list? |\x0;temp~1on7G8~1448|) (let ((|\x0;?binding1~1on7G8~1438| |\x0;temp~1on7G8~1448|)) (let ((|\x0;temp~1on7G8~1444| (cdr |\x0;temp~1on7G8~1443|))) (if (pair? |\x0;temp~1on7G8~1444|) (let ((|\x0;temp~1on7G8~1446| (car |\x0;temp~1on7G8~1444|))) (let ((|\x0;?body0~1on7G8~1439| |\x0;temp~1on7G8~1446|)) (let ((|\x0;temp~1on7G8~1445| (cdr |\x0;temp~1on7G8~1444|))) (if (list? |\x0;temp~1on7G8~1445|) (let ((|\x0;?body1~1on7G8~1440| |\x0;temp~1on7G8~1445|)) (cons (ex:syntax-rename 'let-values '() '(|\x0;env~1on7G8~1442|) 0 '(core let-values)) (cons (cons |\x0;?binding0~1on7G8~1437| '()) (cons (cons (ex:syntax-rename 'let*-values '() '(|\x0;env~1on7G8~1442|) 0 '(core let-values)) (cons |\x0;?binding1~1on7G8~1438| (cons |\x0;?body0~1on7G8~1439| |\x0;?body1~1on7G8~1440|))) '())))) (|\x0;fail~1on7G8~1435|))))) (|\x0;fail~1on7G8~1435|)))) (|\x0;fail~1on7G8~1435|))))) (|\x0;fail~1on7G8~1435|))) (|\x0;fail~1on7G8~1435|))))) (|\x0;fail~1on7G8~1435|)))))) (if (pair? |\x0;input~1on7G8~1433|) (let ((|\x0;temp~1on7G8~1461| (car |\x0;input~1on7G8~1433|))) (let ((|\x0;dummy~1on7G8~1451| |\x0;temp~1on7G8~1461|)) (let ((|\x0;temp~1on7G8~1456| (cdr |\x0;input~1on7G8~1433|))) (if (pair? |\x0;temp~1on7G8~1456|) (let ((|\x0;temp~1on7G8~1460| (car |\x0;temp~1on7G8~1456|))) (if (null? |\x0;temp~1on7G8~1460|) (let ((|\x0;temp~1on7G8~1457| (cdr |\x0;temp~1on7G8~1456|))) (if (pair? |\x0;temp~1on7G8~1457|) (let ((|\x0;temp~1on7G8~1459| (car |\x0;temp~1on7G8~1457|))) (let ((|\x0;?body0~1on7G8~1452| |\x0;temp~1on7G8~1459|)) (let ((|\x0;temp~1on7G8~1458| (cdr |\x0;temp~1on7G8~1457|))) (if (list? |\x0;temp~1on7G8~1458|) (let ((|\x0;?body1~1on7G8~1453| |\x0;temp~1on7G8~1458|)) (cons (ex:syntax-rename 'begin '() '(|\x0;env~1on7G8~1455|) 0 '(core let-values)) (cons |\x0;?body0~1on7G8~1452| |\x0;?body1~1on7G8~1453|))) (|\x0;fail~1on7G8~1434|))))) (|\x0;fail~1on7G8~1434|))) (|\x0;fail~1on7G8~1434|))) (|\x0;fail~1on7G8~1434|))))) (|\x0;fail~1on7G8~1434|)))))) (values)) (lambda () (values)) '|\x0;build~1on7G8~1462|)) (values))
(begin #\L (define |\x0;for-each~1on7G8~1464| ex:unspecified) (define |\x0;map~1on7G8~1463| ex:unspecified) (ex:register-library! (ex:make-library '(rnrs base) (lambda () (ex:uncompress '(((|\x0;env~1on7G8~1475| 0 1 2 3)) (3 (((assert) macro |\x0;assert~1on7G8~1465| (0) #f (rnrs base)) ((for-each) variable |\x0;for-each~1on7G8~1464| (0) #f (rnrs base)) ((map) variable |\x0;map~1on7G8~1463| (0) #f (rnrs base)) ((undefined) variable ex:undefined (0) #f ()) ((eval) variable ex:eval (0) #f ()) ((environment-bindings) variable ex:environment-bindings (0) #f ()) ((environment) variable ex:environment (0) #f ()) ((syntax-violation) variable ex:syntax-violation (0) #f ()) ((syntax->datum) variable ex:syntax->datum (0) #f ()) ((datum->syntax) variable ex:datum->syntax (0) #f ()) ((generate-temporaries) variable ex:generate-temporaries (0) #f ()) ((free-identifier=?) variable ex:free-identifier=? (0) #f ()) ((bound-identifier=?) variable ex:bound-identifier=? (0) #f ()) ((identifier?) variable ex:identifier? (0) #f ()) ((make-variable-transformer) variable ex:make-variable-transformer (0) #f ()) ((syntax-case) macro syntax-case (0) #f ()) ((syntax) macro syntax (0) #f ()) ((letrec-syntax) macro letrec-syntax (0) #f ()) ((let-syntax) macro let-syntax (0) #f ()) ((define-syntax) macro define-syntax (0) #f ()) ((define) macro define (0) #f ()) ((or) macro or (0) #f ()) ((and) macro and (0) #f ()) ((quote) macro quote (0) #f ()) ((lambda) macro lambda (0) #f ()) ((if) macro if (0) #f ()) ((begin) macro begin (0) #f ()) ((letrec*) macro |\x0;letrec*~1on7G8~216| (0) #f (core let)) ((letrec) macro |\x0;letrec~1on7G8~192| (0) #f (core let)) ((let) macro |\x0;let~1on7G8~144| (0) #f (core let)) ((=>) macro |\x0;=>~1on7G8~568| (0) #f (core derived)) ((else) macro |\x0;else~1on7G8~572| (0) #f (core derived)) ((case) macro |\x0;case~1on7G8~435| (0) #f (core derived)) ((cond) macro |\x0;cond~1on7G8~320| (0) #f (core derived)) ((let*) macro |\x0;let*~1on7G8~241| (0) #f (core derived)) ((unquote-splicing) macro |\x0;unquote-splicing~1on7G8~1283| (0) #f (core quasiquote)) ((unquote) macro |\x0;unquote~1on7G8~1279| (0) #f (core quasiquote)) ((quasiquote) macro |\x0;quasiquote~1on7G8~850| (0) #f (core quasiquote)) ((let*-values) macro |\x0;let*-values~1on7G8~1428| (0) #f (core let-values)) ((let-values) macro |\x0;let-values~1on7G8~1288| (0) #f (core let-values)) ((r7rs:syntax-error) macro |\x0;syntax-error~1on7G8~139| (1) #f (core syntax-rules)) ((syntax-rules) macro |\x0;syntax-rules~1on7G8~58| (1) #f (core syntax-rules)) ((identifier-syntax) macro |\x0;identifier-syntax~1on7G8~577| (1) #f (core identifier-syntax)) ((...) macro ... (1) #f ()) ((_) macro _ (1) #f ()) ((set!) macro set! (1 0) #f ()) ((call/cc) variable call/cc (0) #f ()) ((assertion-violation) variable assertion-violation (0) #f ()) ((error) variable error (0) #f ()) ((vector-for-each) variable vector-for-each (0) #f ()) ((vector-map) variable vector-map (0) #f ()) ((string-for-each) variable string-for-each (0) #f ()) ((symbol=?) variable symbol=? (0) #f ()) ((boolean=?) variable boolean=? (0) #f ()) ((exact-integer-sqrt) variable exact-integer-sqrt (0) #f ()) ((div0-and-mod0) variable div0-and-mod0 (0) #f ()) ((mod0) variable mod0 (0) #f ()) ((div0) variable div0 (0) #f ()) ((div-and-mod) variable div-and-mod (0) #f ()) ((mod) variable mod (0) #f ()) ((div) variable div (0) #f ()) ((nan?) variable nan? (0) #f ()) ((infinite?) variable infinite? (0) #f ()) ((finite?) variable finite? (0) #f ()) ((inexact) variable inexact (0) #f ()) ((exact) variable exact (0) #f ()) ((integer-valued?) variable integer-valued? (0) #f ()) ((rational-valued?) variable rational-valued? (0) #f ()) ((real-valued?) variable real-valued? (0) #f ()) ((zero?) variable zero? (0) #f ()) ((vector?) variable vector? (0) #f ()) ((vector-set!) variable vector-set! (0) #f ()) ((vector-ref) variable vector-ref (0) #f ()) ((vector-length) variable vector-length (0) #f ()) ((vector-fill!) variable vector-fill! (0) #f ()) ((vector->list) variable vector->list (0) #f ()) ((vector) variable vector (0) #f ()) ((values) variable values (0) #f ()) ((truncate) variable truncate (0) #f ()) ((tan) variable tan (0) #f ()) ((symbol?) variable symbol? (0) #f ()) ((symbol->string) variable symbol->string (0) #f ()) ((substring) variable substring (0) #f ()) ((string?) variable string? (0) #f ()) ((string>?) variable string>? (0) #f ()) ((string>=?) variable string>=? (0) #f ()) ((string=?) variable string=? (0) #f ()) ((string<?) variable string<? (0) #f ()) ((string<=?) variable string<=? (0) #f ()) ((string-ref) variable string-ref (0) #f ()) ((string-length) variable string-length (0) #f ()) ((string-copy) variable string-copy (0) #f ()) ((string-append) variable string-append (0) #f ()) ((string->symbol) variable string->symbol (0) #f ()) ((string->number) variable string->number (0) #f ()) ((string->list) variable string->list (0) #f ()) ((string) variable string (0) #f ()) ((sqrt) variable sqrt (0) #f ()) ((sin) variable sin (0) #f ()) ((round) variable round (0) #f ()) ((reverse) variable reverse (0) #f ()) ((real?) variable real? (0) #f ()) ((real-part) variable real-part (0) #f ()) ((rationalize) variable rationalize (0) #f ()) ((rational?) variable rational? (0) #f ()) ((procedure?) variable procedure? (0) #f ()) ((positive?) variable positive? (0) #f ()) ((pair?) variable pair? (0) #f ()) ((odd?) variable odd? (0) #f ()) ((numerator) variable numerator (0) #f ()) ((number?) variable number? (0) #f ()) ((number->string) variable number->string (0) #f ()) ((null?) variable null? (0) #f ()) ((not) variable not (0) #f ()) ((negative?) variable negative? (0) #f ()) ((min) variable min (0) #f ()) ((max) variable max (0) #f ()) ((larceny:map) variable larceny:map (0) #f ()) ((make-vector) variable make-vector (0) #f ()) ((make-string) variable make-string (0) #f ()) ((make-rectangular) variable make-rectangular (0) #f ()) ((make-polar) variable make-polar (0) #f ()) ((magnitude) variable magnitude (0) #f ()) ((log) variable log (0) #f ()) ((list?) variable list? (0) #f ()) ((list-tail) variable list-tail (0) #f ()) ((list-ref) variable list-ref (0) #f ()) ((list->vector) variable list->vector (0) #f ()) ((list->string) variable list->string (0) #f ()) ((list) variable list (0) #f ()) ((length) variable length (0) #f ()) ((lcm) variable lcm (0) #f ()) ((integer?) variable integer? (0) #f ()) ((integer->char) variable integer->char (0) #f ()) ((inexact?) variable inexact? (0) #f ()) ((imag-part) variable imag-part (0) #f ()) ((gcd) variable gcd (0) #f ()) ((larceny:for-each) variable larceny:for-each (0) #f ()) ((floor) variable floor (0) #f ()) ((expt) variable expt (0) #f ()) ((exp) variable exp (0) #f ()) ((exact?) variable exact? (0) #f ()) ((even?) variable even? (0) #f ()) ((eqv?) variable eqv? (0) #f ()) ((equal?) variable equal? (0) #f ()) ((eq?) variable eq? (0) #f ()) ((dynamic-wind) variable dynamic-wind (0) #f ()) ((denominator) variable denominator (0) #f ()) ((cos) variable cos (0) #f ()) ((cons) variable cons (0) #f ()) ((complex?) variable complex? (0) #f ()) ((char>=?) variable char>=? (0) #f ()) ((char<=?) variable char<=? (0) #f ()) ((char>?) variable char>? (0) #f ()) ((char<?) variable char<? (0) #f ()) ((char=?) variable char=? (0) #f ()) ((char->integer) variable char->integer (0) #f ()) ((char?) variable char? (0) #f ()) ((ceiling) variable ceiling (0) #f ()) ((cddddr) variable cddddr (0) #f ()) ((cdddar) variable cdddar (0) #f ()) ((cddadr) variable cddadr (0) #f ()) ((cddaar) variable cddaar (0) #f ()) ((cdaddr) variable cdaddr (0) #f ()) ((cdadar) variable cdadar (0) #f ()) ((cdaadr) variable cdaadr (0) #f ()) ((cdaaar) variable cdaaar (0) #f ()) ((cadddr) variable cadddr (0) #f ()) ((caddar) variable caddar (0) #f ()) ((cadadr) variable cadadr (0) #f ()) ((cadaar) variable cadaar (0) #f ()) ((caaddr) variable caaddr (0) #f ()) ((caadar) variable caadar (0) #f ()) ((caaadr) variable caaadr (0) #f ()) ((caaaar) variable caaaar (0) #f ()) ((cdddr) variable cdddr (0) #f ()) ((cddar) variable cddar (0) #f ()) ((cdadr) variable cdadr (0) #f ()) ((cdaar) variable cdaar (0) #f ()) ((caddr) variable caddr (0) #f ()) ((cadar) variable cadar (0) #f ()) ((caadr) variable caadr (0) #f ()) ((caaar) variable caaar (0) #f ()) ((cddr) variable cddr (0) #f ()) ((cdar) variable cdar (0) #f ()) ((cadr) variable cadr (0) #f ()) ((caar) variable caar (0) #f ()) ((cdr) variable cdr (0) #f ()) ((car) variable car (0) #f ()) ((call-with-values) variable call-with-values (0) #f ()) ((call-with-current-continuation) variable call-with-current-continuation (0) #f ()) ((boolean?) variable boolean? (0) #f ()) ((atan) variable atan (0) #f ()) ((asin) variable asin (0) #f ()) ((apply) variable apply (0) #f ()) ((append) variable append (0) #f ()) ((angle) variable angle (0) #f ()) ((acos) variable acos (0) #f ()) ((abs) variable abs (0) #f ()) ((>=) variable >= (0) #f ()) ((>) variable > (0) #f ()) ((=) variable = (0) #f ()) ((<=) variable <= (0) #f ()) ((<) variable < (0) #f ()) ((/) variable / (0) #f ()) ((-) variable - (0) #f ()) ((+) variable + (0) #f ()) ((*) variable * (0) #f ()))) (2 (((x |\x0;c~1on7G8~1466|) variable |\x0;x~1on7G8~1468| (0) #f (rnrs base)))) (1 ()) (0 (((dummy |\x0;c~1on7G8~1466|) . #f) ((expression) . #f)))))) '((begin macro begin (0) #f ()) (if macro if (0) #f ()) (lambda macro lambda (0) #f ()) (quote macro quote (0) #f ()) (set! macro set! (1 0) #f ()) (and macro and (0) #f ()) (or macro or (0) #f ()) (define macro define (0) #f ()) (define-syntax macro define-syntax (0) #f ()) (let-syntax macro let-syntax (0) #f ()) (letrec-syntax macro letrec-syntax (0) #f ()) (_ macro _ (1) #f ()) (... macro ... (1) #f ()) (let macro |\x0;let~1on7G8~144| (0) #f (core let)) (let* macro |\x0;let*~1on7G8~241| (0) #f (core derived)) (letrec macro |\x0;letrec~1on7G8~192| (0) #f (core let)) (letrec* macro |\x0;letrec*~1on7G8~216| (0) #f (core let)) (let-values macro |\x0;let-values~1on7G8~1288| (0) #f (core let-values)) (let*-values macro |\x0;let*-values~1on7G8~1428| (0) #f (core let-values)) (case macro |\x0;case~1on7G8~435| (0) #f (core derived)) (cond macro |\x0;cond~1on7G8~320| (0) #f (core derived)) (else macro |\x0;else~1on7G8~572| (0) #f (core derived)) (=> macro |\x0;=>~1on7G8~568| (0) #f (core derived)) (assert macro |\x0;assert~1on7G8~1465| (0) #f (rnrs base)) (quasiquote macro |\x0;quasiquote~1on7G8~850| (0) #f (core quasiquote)) (unquote macro |\x0;unquote~1on7G8~1279| (0) #f (core quasiquote)) (unquote-splicing macro |\x0;unquote-splicing~1on7G8~1283| (0) #f (core quasiquote)) (syntax-rules macro |\x0;syntax-rules~1on7G8~58| (1) #f (core syntax-rules)) (identifier-syntax macro |\x0;identifier-syntax~1on7G8~577| (1) #f (core identifier-syntax)) (* variable * (0) #f ()) (+ variable + (0) #f ()) (- variable - (0) #f ()) (/ variable / (0) #f ()) (< variable < (0) #f ()) (<= variable <= (0) #f ()) (= variable = (0) #f ()) (> variable > (0) #f ()) (>= variable >= (0) #f ()) (abs variable abs (0) #f ()) (acos variable acos (0) #f ()) (angle variable angle (0) #f ()) (append variable append (0) #f ()) (apply variable apply (0) #f ()) (asin variable asin (0) #f ()) (atan variable atan (0) #f ()) (boolean? variable boolean? (0) #f ()) (call-with-current-continuation variable call-with-current-continuation (0) #f ()) (call-with-values variable call-with-values (0) #f ()) (car variable car (0) #f ()) (cdr variable cdr (0) #f ()) (caar variable caar (0) #f ()) (cadr variable cadr (0) #f ()) (cdar variable cdar (0) #f ()) (cddr variable cddr (0) #f ()) (caaar variable caaar (0) #f ()) (caadr variable caadr (0) #f ()) (cadar variable cadar (0) #f ()) (caddr variable caddr (0) #f ()) (cdaar variable cdaar (0) #f ()) (cdadr variable cdadr (0) #f ()) (cddar variable cddar (0) #f ()) (cdddr variable cdddr (0) #f ()) (caaaar variable caaaar (0) #f ()) (caaadr variable caaadr (0) #f ()) (caadar variable caadar (0) #f ()) (caaddr variable caaddr (0) #f ()) (cadaar variable cadaar (0) #f ()) (cadadr variable cadadr (0) #f ()) (caddar variable caddar (0) #f ()) (cadddr variable cadddr (0) #f ()) (cdaaar variable cdaaar (0) #f ()) (cdaadr variable cdaadr (0) #f ()) (cdadar variable cdadar (0) #f ()) (cdaddr variable cdaddr (0) #f ()) (cddaar variable cddaar (0) #f ()) (cddadr variable cddadr (0) #f ()) (cdddar variable cdddar (0) #f ()) (cddddr variable cddddr (0) #f ()) (ceiling variable ceiling (0) #f ()) (char? variable char? (0) #f ()) (char->integer variable char->integer (0) #f ()) (char=? variable char=? (0) #f ()) (char<? variable char<? (0) #f ()) (char>? variable char>? (0) #f ()) (char<=? variable char<=? (0) #f ()) (char>=? variable char>=? (0) #f ()) (complex? variable complex? (0) #f ()) (cons variable cons (0) #f ()) (cos variable cos (0) #f ()) (denominator variable denominator (0) #f ()) (dynamic-wind variable dynamic-wind (0) #f ()) (eq? variable eq? (0) #f ()) (equal? variable equal? (0) #f ()) (eqv? variable eqv? (0) #f ()) (even? variable even? (0) #f ()) (exact? variable exact? (0) #f ()) (exp variable exp (0) #f ()) (expt variable expt (0) #f ()) (floor variable floor (0) #f ()) (for-each variable |\x0;for-each~1on7G8~1464| (0) #f (rnrs base)) (gcd variable gcd (0) #f ()) (imag-part variable imag-part (0) #f ()) (inexact? variable inexact? (0) #f ()) (integer->char variable integer->char (0) #f ()) (integer? variable integer? (0) #f ()) (lcm variable lcm (0) #f ()) (length variable length (0) #f ()) (list variable list (0) #f ()) (list->string variable list->string (0) #f ()) (list->vector variable list->vector (0) #f ()) (list-ref variable list-ref (0) #f ()) (list-tail variable list-tail (0) #f ()) (list? variable list? (0) #f ()) (log variable log (0) #f ()) (magnitude variable magnitude (0) #f ()) (make-polar variable make-polar (0) #f ()) (make-rectangular variable make-rectangular (0) #f ()) (make-string variable make-string (0) #f ()) (make-vector variable make-vector (0) #f ()) (map variable |\x0;map~1on7G8~1463| (0) #f (rnrs base)) (max variable max (0) #f ()) (min variable min (0) #f ()) (negative? variable negative? (0) #f ()) (not variable not (0) #f ()) (null? variable null? (0) #f ()) (number->string variable number->string (0) #f ()) (number? variable number? (0) #f ()) (numerator variable numerator (0) #f ()) (odd? variable odd? (0) #f ()) (pair? variable pair? (0) #f ()) (positive? variable positive? (0) #f ()) (procedure? variable procedure? (0) #f ()) (rational? variable rational? (0) #f ()) (rationalize variable rationalize (0) #f ()) (real-part variable real-part (0) #f ()) (real? variable real? (0) #f ()) (reverse variable reverse (0) #f ()) (round variable round (0) #f ()) (sin variable sin (0) #f ()) (sqrt variable sqrt (0) #f ()) (string variable string (0) #f ()) (string->list variable string->list (0) #f ()) (string->number variable string->number (0) #f ()) (string->symbol variable string->symbol (0) #f ()) (string-append variable string-append (0) #f ()) (string-copy variable string-copy (0) #f ()) (string-length variable string-length (0) #f ()) (string-ref variable string-ref (0) #f ()) (string<=? variable string<=? (0) #f ()) (string<? variable string<? (0) #f ()) (string=? variable string=? (0) #f ()) (string>=? variable string>=? (0) #f ()) (string>? variable string>? (0) #f ()) (string? variable string? (0) #f ()) (substring variable substring (0) #f ()) (symbol->string variable symbol->string (0) #f ()) (symbol? variable symbol? (0) #f ()) (tan variable tan (0) #f ()) (truncate variable truncate (0) #f ()) (values variable values (0) #f ()) (vector variable vector (0) #f ()) (vector->list variable vector->list (0) #f ()) (vector-fill! variable vector-fill! (0) #f ()) (vector-length variable vector-length (0) #f ()) (vector-ref variable vector-ref (0) #f ()) (vector-set! variable vector-set! (0) #f ()) (vector? variable vector? (0) #f ()) (zero? variable zero? (0) #f ()) (real-valued? variable real-valued? (0) #f ()) (rational-valued? variable rational-valued? (0) #f ()) (integer-valued? variable integer-valued? (0) #f ()) (exact variable exact (0) #f ()) (inexact variable inexact (0) #f ()) (finite? variable finite? (0) #f ()) (infinite? variable infinite? (0) #f ()) (nan? variable nan? (0) #f ()) (div variable div (0) #f ()) (mod variable mod (0) #f ()) (div-and-mod variable div-and-mod (0) #f ()) (div0 variable div0 (0) #f ()) (mod0 variable mod0 (0) #f ()) (div0-and-mod0 variable div0-and-mod0 (0) #f ()) (exact-integer-sqrt variable exact-integer-sqrt (0) #f ()) (boolean=? variable boolean=? (0) #f ()) (symbol=? variable symbol=? (0) #f ()) (string-for-each variable string-for-each (0) #f ()) (vector-map variable vector-map (0) #f ()) (vector-for-each variable vector-for-each (0) #f ()) (error variable error (0) #f ()) (assertion-violation variable assertion-violation (0) #f ()) (call/cc variable call/cc (0) #f ())) '(((core primitives) 1) ((core identifier-syntax) 1) ((core syntax-rules) 1) ((core let-values) 0) ((core quasiquote) 0) ((core derived) 0) ((core let) 0) ((core primitives) 0)) '(|\x0;build~1on7G8~2| |\x0;build~1on7G8~622| |\x0;build~1on7G8~143| |\x0;build~1on7G8~1462| |\x0;build~1on7G8~1287| |\x0;build~1on7G8~576| |\x0;build~1on7G8~240| |\x0;build~1on7G8~2|) (lambda () (ex:register-macro! '|\x0;assert~1on7G8~1465| (lambda (|\x0;x~1on7G8~1468|) (let ((|\x0;input~1on7G8~1470| |\x0;x~1on7G8~1468|)) (let ((|\x0;fail~1on7G8~1471| (lambda () (ex:invalid-form |\x0;input~1on7G8~1470|)))) (if (pair? |\x0;input~1on7G8~1470|) (let ((|\x0;temp~1on7G8~1479| (car |\x0;input~1on7G8~1470|))) (let ((|\x0;dummy~1on7G8~1472| |\x0;temp~1on7G8~1479|)) (let ((|\x0;temp~1on7G8~1476| (cdr |\x0;input~1on7G8~1470|))) (if (pair? |\x0;temp~1on7G8~1476|) (let ((|\x0;temp~1on7G8~1478| (car |\x0;temp~1on7G8~1476|))) (let ((|\x0;expression~1on7G8~1473| |\x0;temp~1on7G8~1478|)) (let ((|\x0;temp~1on7G8~1477| (cdr |\x0;temp~1on7G8~1476|))) (if (null? |\x0;temp~1on7G8~1477|) (cons (ex:syntax-rename 'or '() '(|\x0;env~1on7G8~1475|) 0 '(rnrs base)) (cons |\x0;expression~1on7G8~1473| (cons (cons (ex:syntax-rename 'assertion-violation '() '(|\x0;env~1on7G8~1475|) 0 '(rnrs base)) (cons '#f (cons '"assertion failed" (cons (cons (ex:syntax-rename 'quote '() '(|\x0;env~1on7G8~1475|) 0 '(rnrs base)) (cons |\x0;expression~1on7G8~1473| '())) '())))) '()))) (|\x0;fail~1on7G8~1471|))))) (|\x0;fail~1on7G8~1471|))))) (|\x0;fail~1on7G8~1471|)))))) (values)) (lambda () (set! |\x0;for-each~1on7G8~1464| ex:undefined) (set! |\x0;map~1on7G8~1463| ex:undefined) (set! |\x0;map~1on7G8~1463| larceny:map) (set! |\x0;for-each~1on7G8~1464| larceny:for-each) (values)) '|\x0;build~1on7G8~1480|)) (values))
(begin #\L (ex:register-library! (ex:make-library '(rnrs io simple) (lambda () '()) '((&i/o variable &i/o (0) #f ()) (make-i/o-error variable make-i/o-error (0) #f ()) (i/o-error? variable i/o-error? (0) #f ()) (&i/o-read variable &i/o-read (0) #f ()) (make-i/o-read-error variable make-i/o-read-error (0) #f ()) (i/o-read-error? variable i/o-read-error? (0) #f ()) (&i/o-write variable &i/o-write (0) #f ()) (make-i/o-write-error variable make-i/o-write-error (0) #f ()) (i/o-write-error? variable i/o-write-error? (0) #f ()) (&i/o-invalid-position variable &i/o-invalid-position (0) #f ()) (make-i/o-invalid-position-error variable make-i/o-invalid-position-error (0) #f ()) (i/o-invalid-position-error? variable i/o-invalid-position-error? (0) #f ()) (i/o-error-position variable i/o-error-position (0) #f ()) (&i/o-filename variable &i/o-filename (0) #f ()) (make-i/o-filename-error variable make-i/o-filename-error (0) #f ()) (i/o-filename-error? variable i/o-filename-error? (0) #f ()) (i/o-error-filename variable i/o-error-filename (0) #f ()) (&i/o-file-protection variable &i/o-file-protection (0) #f ()) (make-i/o-file-protection-error variable make-i/o-file-protection-error (0) #f ()) (i/o-file-protection-error? variable i/o-file-protection-error? (0) #f ()) (&i/o-file-is-read-only variable &i/o-file-is-read-only (0) #f ()) (make-i/o-file-is-read-only-error variable make-i/o-file-is-read-only-error (0) #f ()) (i/o-file-is-read-only-error? variable i/o-file-is-read-only-error? (0) #f ()) (&i/o-file-already-exists variable &i/o-file-already-exists (0) #f ()) (make-i/o-file-already-exists-error variable make-i/o-file-already-exists-error (0) #f ()) (i/o-file-already-exists-error? variable i/o-file-already-exists-error? (0) #f ()) (&i/o-file-does-not-exist variable &i/o-file-does-not-exist (0) #f ()) (make-i/o-file-does-not-exist-error variable make-i/o-file-does-not-exist-error (0) #f ()) (i/o-file-does-not-exist-error? variable i/o-file-does-not-exist-error? (0) #f ()) (&i/o-port variable &i/o-port (0) #f ()) (make-i/o-port-error variable make-i/o-port-error (0) #f ()) (i/o-port-error? variable i/o-port-error? (0) #f ()) (i/o-error-port variable i/o-error-port (0) #f ()) (eof-object variable eof-object (0) #f ()) (eof-object? variable eof-object? (0) #f ()) (call-with-input-file variable call-with-input-file (0) #f ()) (call-with-output-file variable call-with-output-file (0) #f ()) (input-port? variable input-port? (0) #f ()) (output-port? variable output-port? (0) #f ()) (current-input-port variable current-input-port (0) #f ()) (current-output-port variable current-output-port (0) #f ()) (current-error-port variable current-error-port (0) #f ()) (with-input-from-file variable with-input-from-file (0) #f ()) (with-output-to-file variable with-output-to-file (0) #f ()) (open-input-file variable open-input-file (0) #f ()) (open-output-file variable open-output-file (0) #f ()) (close-input-port variable close-input-port (0) #f ()) (close-output-port variable close-output-port (0) #f ()) (read-char variable read-char (0) #f ()) (peek-char variable peek-char (0) #f ()) (read variable read (0) #f ()) (write-char variable write-char (0) #f ()) (newline variable newline (0) #f ()) (display variable display (0) #f ()) (write variable write (0) #f ())) '() '() (lambda () (values)) (lambda () (values)) '|\x0;build~1on7G8~1481|)) (values))
